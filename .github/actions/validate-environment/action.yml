name: 'Validate Environment Configuration'
description: 'Validates environment-specific configuration and prerequisites'

inputs:
  environment:
    description: 'Target environment (dev, staging, prod)'
    required: true
  aws-region:
    description: 'AWS region for deployment'
    required: true
  aws-role:
    description: 'AWS IAM role to assume'
    required: true

outputs:
  validation-status:
    description: 'Environment validation status'
    value: ${{ steps.validate.outputs.status }}
  environment-config:
    description: 'Environment configuration summary'
    value: ${{ steps.validate.outputs.config }}

runs:
  using: 'composite'
  steps:
    - name: Validate Environment Input
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        
        # Validate environment value
        case "$ENVIRONMENT" in
          dev|staging|prod)
            echo "✅ Valid environment: $ENVIRONMENT"
            ;;
          *)
            echo "❌ Invalid environment: $ENVIRONMENT"
            echo "Valid environments: dev, staging, prod"
            exit 1
            ;;
        esac

    - name: Validate AWS Configuration
      shell: bash
      run: |
        AWS_REGION="${{ inputs.aws-region }}"
        AWS_ROLE="${{ inputs.aws-role }}"
        
        # Validate AWS region format
        if [[ "$AWS_REGION" =~ ^[a-z]{2}(-gov)?-[a-z]+-[0-9]$ ]]; then
          echo "✅ Valid AWS region format: $AWS_REGION"
        else
          echo "❌ Invalid AWS region format: $AWS_REGION"
          exit 1
        fi
        
        # Validate AWS role ARN format
        if [[ "$AWS_ROLE" =~ ^arn:aws:iam::[0-9]{12}:role/.+ ]]; then
          echo "✅ Valid AWS role ARN format"
        else
          echo "❌ Invalid AWS role ARN format"
          exit 1
        fi

    - name: Check Required Files
      shell: bash
      run: |
        echo "## 📋 Environment Validation" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**AWS Region**: ${{ inputs.aws-region }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        validation_errors=0
        
        # Check Terraform configuration files
        required_terraform_files=(
          "terraform/main.tf"
          "terraform/variables.tf"
          "terraform/outputs.tf"
          "terraform/backend.tf"
        )
        
        echo "### Terraform Configuration Files" >> $GITHUB_STEP_SUMMARY
        for file in "${required_terraform_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ $file missing" >> $GITHUB_STEP_SUMMARY
            validation_errors=$((validation_errors + 1))
          fi
        done
        
        # Check website source files
        required_src_files=(
          "src/index.html"
          "src/404.html"
          "src/robots.txt"
        )
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Website Source Files" >> $GITHUB_STEP_SUMMARY
        for file in "${required_src_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ $file missing" >> $GITHUB_STEP_SUMMARY
            validation_errors=$((validation_errors + 1))
          fi
        done
        
        # Check testing infrastructure
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Testing Infrastructure" >> $GITHUB_STEP_SUMMARY
        if [ -f "test/functions/test-functions.sh" ]; then
          echo "✅ test-functions.sh exists" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ test-functions.sh missing (tests may not work)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "test/unit" ]; then
          echo "✅ test/unit directory exists" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ test/unit directory missing" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Set validation status
        if [ $validation_errors -eq 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Environment validation passed**" >> $GITHUB_STEP_SUMMARY
          echo "VALIDATION_STATUS=success" >> $GITHUB_ENV
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Environment validation failed with $validation_errors errors**" >> $GITHUB_STEP_SUMMARY
          echo "VALIDATION_STATUS=failed" >> $GITHUB_ENV
          exit 1
        fi

    - name: Generate Environment Configuration
      id: validate
      shell: bash
      run: |
        ENVIRONMENT="${{ inputs.environment }}"
        
        # Generate environment-specific configuration
        case "$ENVIRONMENT" in
          dev)
            CONFIG='{
              "single_az_deployment": true,
              "enable_cross_region_replication": false,
              "cloudfront_price_class": "PriceClass_100",
              "waf_rate_limit": 1000,
              "enable_detailed_monitoring": false
            }'
            ;;
          staging)
            CONFIG='{
              "single_az_deployment": false,
              "enable_cross_region_replication": true,
              "cloudfront_price_class": "PriceClass_200",
              "waf_rate_limit": 2000,
              "enable_detailed_monitoring": true
            }'
            ;;
          prod)
            CONFIG='{
              "single_az_deployment": false,
              "enable_cross_region_replication": true,
              "cloudfront_price_class": "PriceClass_All",
              "waf_rate_limit": 5000,
              "enable_detailed_monitoring": true
            }'
            ;;
        esac
        
        echo "status=$VALIDATION_STATUS" >> $GITHUB_OUTPUT
        echo "config=$CONFIG" >> $GITHUB_OUTPUT
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment Configuration" >> $GITHUB_STEP_SUMMARY
        echo '```json' >> $GITHUB_STEP_SUMMARY
        echo "$CONFIG" | jq . >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY