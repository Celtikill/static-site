name: STAGING - PR Preview Deployments

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
    branches: [main]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy'
        required: true
        type: string
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        type: boolean
        default: true
      deploy_website:
        description: 'Deploy website content'
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read
  pull-requests: write
  deployments: write
  actions: read

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}
  TF_IN_AUTOMATION: true

concurrency:
  group: staging-pr-${{ github.event.pull_request.number || inputs.pr_number }}
  cancel-in-progress: true  # Cancel previous staging deploys for same PR

jobs:
  info:
    name: "üìã PR Staging Information"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      pr_number: ${{ steps.info.outputs.pr_number }}
      pr_branch: ${{ steps.info.outputs.pr_branch }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}
      deploy_infrastructure: ${{ steps.info.outputs.deploy_infrastructure }}
      deploy_website: ${{ steps.info.outputs.deploy_website }}
      deployment_id: ${{ steps.info.outputs.deployment_id }}
      should_deploy: ${{ steps.info.outputs.should_deploy }}
    steps:
      - name: Determine PR Staging Info
        id: info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="${{ inputs.pr_number }}"
            COMMIT_SHA="${{ github.sha }}"
            DEPLOY_INFRA="${{ inputs.deploy_infrastructure }}"
            DEPLOY_WEBSITE="${{ inputs.deploy_website }}"
            PR_BRANCH="manual-dispatch"
            TRIGGER_SOURCE="manual dispatch"
            SHOULD_DEPLOY="true"
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
            PR_BRANCH="${{ github.event.pull_request.head.ref }}"
            DEPLOY_INFRA="true"
            DEPLOY_WEBSITE="true"
            
            # Determine if we should deploy based on event type
            case "${{ github.event_name }}" in
              pull_request)
                case "${{ github.event.action }}" in
                  opened|synchronize|reopened)
                    TRIGGER_SOURCE="PR ${{ github.event.action }}"
                    SHOULD_DEPLOY="true"
                    ;;
                  *)
                    TRIGGER_SOURCE="PR ${{ github.event.action }}"
                    SHOULD_DEPLOY="false"
                    ;;
                esac
                ;;
              pull_request_review)
                if [ "${{ github.event.review.state }}" = "approved" ]; then
                  TRIGGER_SOURCE="PR approved"
                  SHOULD_DEPLOY="true"
                else
                  TRIGGER_SOURCE="PR review ${{ github.event.review.state }}"
                  SHOULD_DEPLOY="false"
                fi
                ;;
              *)
                TRIGGER_SOURCE="unknown"
                SHOULD_DEPLOY="false"
                ;;
            esac
          fi
          
          DEPLOYMENT_ID="staging-pr-$PR_NUMBER-$(date +%Y%m%d-%H%M%S)"
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "deploy_infrastructure=$DEPLOY_INFRA" >> $GITHUB_OUTPUT
          echo "deploy_website=$DEPLOY_WEBSITE" >> $GITHUB_OUTPUT
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "# üé≠ PR Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **PR**: #$PR_NUMBER ($PR_BRANCH)" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: $TRIGGER_SOURCE" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "- **Will Deploy**: $SHOULD_DEPLOY" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: $DEPLOYMENT_ID" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: "üé≠ Deploy PR Preview to Staging"
    uses: ./.github/workflows/deploy-composite.yml
    needs: info
    if: needs.info.outputs.should_deploy == 'true'
    with:
      environment: staging
      ref: ${{ needs.info.outputs.commit_sha }}
      deploy_infrastructure: ${{ needs.info.outputs.deploy_infrastructure == 'true' }}
      deploy_website: ${{ needs.info.outputs.deploy_website == 'true' }}
      deployment_id: ${{ needs.info.outputs.deployment_id }}

  comment:
    name: "üí¨ Update PR Comment"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [info, deploy]
    if: needs.info.outputs.should_deploy == 'true' && always()
    steps:
      - name: Update PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.info.outputs.pr_number }};
            const deployResult = '${{ needs.deploy.result }}';
            const deploymentUrl = '${{ needs.deploy.outputs.deployment_url }}';
            const deploymentStatus = '${{ needs.deploy.outputs.deployment_status }}';
            
            let commentBody = `## üé≠ Staging Preview Deployment
            
            **PR**: #${prNumber}
            **Environment**: Staging
            **Commit**: \`${{ needs.info.outputs.commit_sha }}\`
            **Deployment ID**: \`${{ needs.info.outputs.deployment_id }}\`
            
            `;
            
            if (deployResult === 'success') {
              commentBody += `### ‚úÖ Deployment Successful
            
            üåê **Preview URL**: ${deploymentUrl}
            
            Your changes are now available for review at the staging environment.
            
            `;
            } else {
              commentBody += `### ‚ùå Deployment Failed
            
            The staging deployment encountered an error. Please check the workflow logs for details.
            
            `;
            }
            
            commentBody += `<details>
            <summary>Deployment Details</summary>
            
            - **Status**: ${deploymentStatus || 'Unknown'}
            - **Workflow**: [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - **Infrastructure**: ${{ needs.info.outputs.deploy_infrastructure == 'true' && '‚úÖ Deployed' || '‚ûñ Skipped' }}
            - **Website**: ${{ needs.info.outputs.deploy_website == 'true' && '‚úÖ Deployed' || '‚ûñ Skipped' }}
            
            </details>
            
            ---
            *This is an automated staging deployment for PR #${prNumber}*`;
            
            // Find existing comment to update or create new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(
              comment => comment.user.login === 'github-actions[bot]' && 
                         comment.body.includes('üé≠ Staging Preview Deployment')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }

  cleanup:
    name: "üßπ Cleanup on PR Close"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.action == 'closed'
    steps:
      - name: PR Cleanup Notice
        run: |
          echo "## üßπ PR Cleanup" >> $GITHUB_STEP_SUMMARY
          echo "PR #${{ github.event.pull_request.number }} was closed" >> \
            $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: Staging resources remain active for other PRs" >> \
            $GITHUB_STEP_SUMMARY
          echo "The staging environment is shared across all PR previews" >> \
            $GITHUB_STEP_SUMMARY

  summary:
    name: "üìä Staging Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [info, deploy, comment]
    if: always()
    steps:
      - name: Staging Summary
        run: |
          echo "## üìä PR Staging Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PR | #${{ needs.info.outputs.pr_number }} |" >> \
            $GITHUB_STEP_SUMMARY
          echo "| Should Deploy | ${{ needs.info.outputs.should_deploy }} |" >> \
            $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.info.outputs.should_deploy }}" = "true" ]; then
            DEPLOY_STATUS="${{ needs.deploy.result }}"
            if [ "$DEPLOY_STATUS" = "success" ]; then
              echo "| Deployment | ‚úÖ Success |" >> $GITHUB_STEP_SUMMARY
              if [ -n "${{ needs.deploy.outputs.deployment_url }}" ]; then
                URL="${{ needs.deploy.outputs.deployment_url }}"
                echo "| Preview URL | [$URL]($URL) |" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "| Deployment | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "| PR Comment | ${{ needs.comment.result == 'success' && '‚úÖ Updated' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Deployment | ‚ûñ Skipped |" >> $GITHUB_STEP_SUMMARY
            echo "| PR Comment | ‚ûñ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ **PR PREVIEW READY**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.info.outputs.should_deploy }}" = "false" ]; then
            echo "‚ÑπÔ∏è **NO DEPLOYMENT NEEDED**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **PREVIEW DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
          fi
