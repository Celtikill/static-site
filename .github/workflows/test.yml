name: TEST - Quality Gates and Validation (Streamlined)

on:
  workflow_run:
    workflows: ["BUILD - Code Validation and Artifact Creation"]
    types: [completed]
    branches: [main, 'feature/*', 'bugfix/*', 'hotfix/*']
  workflow_dispatch:
    inputs:
      skip_build_check:
        description: 'Skip BUILD workflow dependency check'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Target test environment'
        required: false
        type: choice
        options: [dev, staging, prod]
        default: dev

permissions:
  contents: read
  security-events: write
  actions: read

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}
  TF_IN_AUTOMATION: true

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  info:
    name: "📋 Test Information"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      target_environment: ${{ steps.info.outputs.target_environment }}
      test_id: ${{ steps.info.outputs.test_id }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}
    steps:
      - name: Determine Test Configuration
        id: info
        run: |
          TEST_ID="test-$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_ENV="${{ inputs.environment }}"
            COMMIT_SHA="${{ github.sha }}"
            TRIGGER_SOURCE="manual dispatch"
            BUILD_CHECK="${{ inputs.skip_build_check }}"
          else
            # Triggered by BUILD workflow
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ] && [ "$BUILD_CHECK" != "true" ]; then
              echo "❌ BUILD workflow failed - aborting tests"
              exit 1
            fi

            BRANCH="${{ github.event.workflow_run.head_branch }}"
            case "$BRANCH" in
              main) TARGET_ENV="staging" ;;
              *) TARGET_ENV="dev" ;;
            esac

            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
            TRIGGER_SOURCE="automatic via BUILD workflow"
          fi

          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "test_id=$TEST_ID" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          echo "# 🧪 TEST Phase - Streamlined" >> $GITHUB_STEP_SUMMARY
          echo "- **Test ID**: $TEST_ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $TARGET_ENV ($TRIGGER_SOURCE)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY

  policy-validation:
    name: "📋 Policy Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: info
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.info.outputs.commit_sha }}

      - name: Setup OpenTofu and Policy Tools
        run: |
          # Install OpenTofu
          curl -L -o /tmp/tofu.zip https://github.com/opentofu/opentofu/releases/download/v${{ env.OPENTOFU_VERSION }}/tofu_${{ env.OPENTOFU_VERSION }}_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/
          
          # Install OPA (Open Policy Agent)
          OPA_VERSION=v1.8.0
          curl -L -o /tmp/opa https://openpolicyagent.org/downloads/${OPA_VERSION}/opa_linux_amd64_static
          chmod +x /tmp/opa
          sudo mv /tmp/opa /usr/local/bin/
          
          # Install Conftest
          CONFTEST_VERSION=0.62.0
          curl -L -o /tmp/conftest.tar.gz https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz
          cd /tmp && tar xzf conftest.tar.gz
          sudo mv /tmp/conftest /usr/local/bin/
          chmod +x /usr/local/bin/conftest
          
          # Verify installations with explicit error handling
          echo "=== Tool Verification ==="
          tofu version || { echo "❌ OpenTofu installation failed"; exit 1; }
          opa version || { echo "❌ OPA installation failed"; exit 1; }
          conftest --version || { echo "❌ Conftest installation failed"; exit 1; }
          echo "✅ All policy tools installed successfully"

      - name: Policy Validation with OPA
        working-directory: terraform/workloads/static-site
        env:
          TARGET_ENV: ${{ needs.info.outputs.target_environment }}
        run: |
          echo "## 📋 Policy Validation with OPA - $TARGET_ENV" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Verify required tools are available before proceeding
          echo "=== Policy Tool Verification ==="
          
          if ! command -v tofu >/dev/null 2>&1; then
            echo "❌ **CRITICAL ERROR** - OpenTofu binary not found" >> $GITHUB_STEP_SUMMARY
            echo "Installation step may have failed. Check setup logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if ! command -v opa >/dev/null 2>&1; then
            echo "❌ **CRITICAL ERROR** - OPA binary not found" >> $GITHUB_STEP_SUMMARY
            echo "Installation step may have failed. Check setup logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if ! command -v conftest >/dev/null 2>&1; then
            echo "❌ **CRITICAL ERROR** - Conftest binary not found" >> $GITHUB_STEP_SUMMARY
            echo "Installation step may have failed. Check setup logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ All required policy tools verified"

          # Create temporary local backend override to avoid AWS credentials
          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate.policy"
            }
          }
          EOF
          
          # Initialize and generate plan for policy analysis
          tofu init -reconfigure
          
          # Configuration validation first
          echo "**🔍 Configuration Validation:**" >> $GITHUB_STEP_SUMMARY
          if tofu validate; then
            echo "✅ Terraform configuration syntax is valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform configuration validation failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CONFIGURATION INVALID** - Fix syntax errors before policy validation" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Generate plan JSON for OPA analysis (using mock values to avoid AWS calls)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📋 Generating Plan for Policy Analysis:**" >> $GITHUB_STEP_SUMMARY
          
          # Generate plan - handle provider credential errors gracefully
          TFVARS_FILE="environments/$TARGET_ENV.tfvars"
          
          # Remove any existing plan file
          rm -f policy.tfplan
          
          echo "Attempting to generate Terraform plan for policy analysis..." >> $GITHUB_STEP_SUMMARY
          
          # Run the plan command and capture the exit code
          set +e  # Don't exit on error
          if [ -f "$TFVARS_FILE" ]; then
            tofu plan -var-file="$TFVARS_FILE" -var="github_repository=${{ github.repository }}" -out=policy.tfplan -refresh=false
            PLAN_EXIT_CODE=$?
          else
            tofu plan -var="environment=$TARGET_ENV" -var="github_repository=${{ github.repository }}" -out=policy.tfplan -refresh=false
            PLAN_EXIT_CODE=$?
          fi
          set -e  # Re-enable exit on error
          
          # Check if plan file was created (this is what matters for OPA)
          if [ -f "policy.tfplan" ]; then
            echo "✅ Plan file generated - proceeding with OPA policy validation" >> $GITHUB_STEP_SUMMARY
            if [ $PLAN_EXIT_CODE -ne 0 ]; then
              echo "   (Plan had provider warnings but structure is valid for policy analysis)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **PLAN GENERATION FAILED** - Cannot perform OPA policy validation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 For Engineers - How to Fix Plan Generation Issues:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Possible Causes:**" >> $GITHUB_STEP_SUMMARY
            echo "- Terraform configuration syntax errors" >> $GITHUB_STEP_SUMMARY
            echo "- Missing or invalid variable files" >> $GITHUB_STEP_SUMMARY
            echo "- Provider configuration issues" >> $GITHUB_STEP_SUMMARY
            echo "- Module reference problems" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Debugging Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`tofu validate\` locally in \`terraform/workloads/static-site/\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Check that \`environments/$TARGET_ENV.tfvars\` exists and has valid syntax" >> $GITHUB_STEP_SUMMARY
            echo "3. Verify all module references are correct" >> $GITHUB_STEP_SUMMARY
            echo "4. Run \`tofu plan\` locally to reproduce the issue" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note:** OPA policy validation requires a valid Terraform plan." >> $GITHUB_STEP_SUMMARY
            echo "Static analysis is insufficient for comprehensive security policy enforcement." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **POLICY VALIDATION FAILED** - Fix plan generation to enable OPA validation" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Convert plan to JSON for OPA
          echo "Converting plan to JSON for policy analysis..." >> $GITHUB_STEP_SUMMARY
          if ! tofu show -json policy.tfplan > plan.json; then
            echo "❌ **PLAN JSON CONVERSION FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 For Engineers - Plan JSON Conversion Error:" >> $GITHUB_STEP_SUMMARY
            echo "- The Terraform plan file exists but cannot be converted to JSON" >> $GITHUB_STEP_SUMMARY
            echo "- This may indicate a corrupted plan file or OpenTofu version issue" >> $GITHUB_STEP_SUMMARY  
            echo "- Try running \`tofu show -json plan.tfplan\` locally to debug" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **POLICY VALIDATION FAILED** - Cannot analyze plan for OPA validation" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Copy policy files to current directory
          if ! cp ../../../policies/*.rego . 2>/dev/null; then
            echo "❌ **OPA POLICY FILES MISSING**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 For Engineers - Policy Files Not Found:" >> $GITHUB_STEP_SUMMARY
            echo "- Expected policy files in \`policies/\` directory are missing" >> $GITHUB_STEP_SUMMARY
            echo "- Required files: \`foundation-security.rego\`, \`foundation-compliance.rego\`" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure policy files are committed to the repository" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **POLICY VALIDATION FAILED** - Missing policy definitions" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if ! cp ../../../policies/conftest.yaml . 2>/dev/null; then
            echo "⚠️ Conftest configuration not found - using default settings" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Verify OPA tools are available
          if ! command -v conftest >/dev/null 2>&1; then
            echo "❌ **CONFTEST NOT AVAILABLE**" >> $GITHUB_STEP_SUMMARY  
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 For Engineers - Conftest Installation Error:" >> $GITHUB_STEP_SUMMARY
            echo "- Conftest policy runner is not installed or not in PATH" >> $GITHUB_STEP_SUMMARY
            echo "- This indicates a workflow setup issue" >> $GITHUB_STEP_SUMMARY
            echo "- Check the 'Setup OpenTofu and Policy Tools' step above" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **POLICY VALIDATION FAILED** - Missing policy validation tools" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Run OPA policy validation
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🛡️ OPA Security Policy Validation:**" >> $GITHUB_STEP_SUMMARY
          
          SECURITY_VIOLATIONS=0
          
          # Run security policies (deny rules) with proper error handling and output validation
          set +e  # Don't exit on conftest failure - we want to capture details
          
          echo "🔍 Running security policy validation..."
          SECURITY_OUTPUT=$(conftest verify --policy foundation-security.rego plan.json --output table 2>&1)
          SECURITY_EXIT_CODE=$?
          set -e
          
          # Critical: Detect silent failures where conftest produces no output
          if [ -z "$SECURITY_OUTPUT" ] && [ $SECURITY_EXIT_CODE -eq 0 ]; then
            echo "❌ **CRITICAL ERROR** - Conftest security validation produced no output" >> $GITHUB_STEP_SUMMARY
            echo "This indicates conftest failed to execute properly or policies were not evaluated." >> $GITHUB_STEP_SUMMARY
            echo "**Tools status:** conftest binary verified but execution failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "Security validation output: $SECURITY_OUTPUT"
          
          # Critical: Check for syntax errors or system failures vs policy violations
          if echo "$SECURITY_OUTPUT" | grep -q "rego_parse_error\|load: loading policies\|Error: running verification"; then
            echo "❌ **CRITICAL ERROR** - Conftest syntax or system error in security policies" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$SECURITY_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**This is a system failure, not a policy violation. Fix the policy syntax before proceeding.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ $SECURITY_EXIT_CODE -eq 0 ]; then
            echo "✅ All security policies passed" >> $GITHUB_STEP_SUMMARY
            echo "Security policies executed successfully - no violations detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security policy violations found" >> $GITHUB_STEP_SUMMARY
            SECURITY_VIOLATIONS=1
            
            # Get detailed security violations with error handling
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Security Policy Details:**" >> $GITHUB_STEP_SUMMARY
            
            set +e
            SECURITY_DETAILS=$(conftest verify --policy foundation-security.rego plan.json --output json 2>&1)
            SECURITY_JSON_EXIT=$?
            set -e
            
            if [ $SECURITY_JSON_EXIT -eq 0 ] && [ -n "$SECURITY_DETAILS" ]; then
              echo "$SECURITY_DETAILS" | jq -r '.[] | select(.failures) | .failures[] | "❌ " + .msg' >> $GITHUB_STEP_SUMMARY 2>/dev/null || {
                echo "❌ Policy violations detected but details unavailable (JSON parsing error)" >> $GITHUB_STEP_SUMMARY
                echo "Raw output: $SECURITY_DETAILS" >> $GITHUB_STEP_SUMMARY
              }
            else
              echo "❌ Policy violations detected but details unavailable (conftest error)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Run compliance policies (warn rules) with output validation
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📋 OPA Compliance Policy Validation:**" >> $GITHUB_STEP_SUMMARY
          
          set +e
          echo "🔍 Running compliance policy validation..."
          COMPLIANCE_OUTPUT=$(conftest verify --policy foundation-compliance.rego plan.json --output table 2>&1)
          COMPLIANCE_EXIT_CODE=$?
          set -e
          
          # Critical: Detect silent failures where conftest produces no output
          if [ -z "$COMPLIANCE_OUTPUT" ] && [ $COMPLIANCE_EXIT_CODE -eq 0 ]; then
            echo "❌ **CRITICAL ERROR** - Conftest compliance validation produced no output" >> $GITHUB_STEP_SUMMARY
            echo "This indicates conftest failed to execute properly or policies were not evaluated." >> $GITHUB_STEP_SUMMARY
            echo "**Tools status:** conftest binary verified but execution failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "Compliance validation output: $COMPLIANCE_OUTPUT"
          
          # Critical: Check for syntax errors or system failures vs policy violations
          if echo "$COMPLIANCE_OUTPUT" | grep -q "rego_parse_error\|load: loading policies\|Error: running verification"; then
            echo "❌ **CRITICAL ERROR** - Conftest syntax or system error in compliance policies" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Error Details:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$COMPLIANCE_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**This is a system failure, not a policy violation. Fix the policy syntax before proceeding.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ $COMPLIANCE_EXIT_CODE -eq 0 ]; then
            echo "✅ All compliance policies passed" >> $GITHUB_STEP_SUMMARY
            echo "Compliance policies executed successfully - no warnings detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Compliance policy warnings found" >> $GITHUB_STEP_SUMMARY
            
            # Get detailed compliance warnings with error handling
            echo "" >> $GITHUB_STEP_SUMMARY  
            echo "**Compliance Policy Details:**" >> $GITHUB_STEP_SUMMARY
            
            set +e
            COMPLIANCE_DETAILS=$(conftest verify --policy foundation-compliance.rego plan.json --output json 2>&1)
            COMPLIANCE_JSON_EXIT=$?
            set -e
            
            if [ $COMPLIANCE_JSON_EXIT -eq 0 ] && [ -n "$COMPLIANCE_DETAILS" ]; then
              echo "$COMPLIANCE_DETAILS" | jq -r '.[] | select(.warnings) | .warnings[] | "⚠️ " + .msg' >> $GITHUB_STEP_SUMMARY 2>/dev/null || {
                echo "⚠️ Policy warnings detected but details unavailable (JSON parsing error)" >> $GITHUB_STEP_SUMMARY  
                echo "Raw output: $COMPLIANCE_DETAILS" >> $GITHUB_STEP_SUMMARY
              }
            else
              echo "⚠️ Policy warnings detected but details unavailable (conftest error)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Environment-specific enforcement with actionable guidance
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$TARGET_ENV" = "prod" ] && [ $SECURITY_VIOLATIONS -gt 0 ]; then
            echo "❌ **POLICY VALIDATION FAILED** - Production deployment blocked due to security violations" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 For Engineers - Security Violations Must Be Fixed:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the security policy details above for specific violations" >> $GITHUB_STEP_SUMMARY
            echo "2. Fix each violation in your Terraform configuration" >> $GITHUB_STEP_SUMMARY
            echo "3. Test locally: \`conftest verify --policy policies/foundation-security.rego plan.json\`" >> $GITHUB_STEP_SUMMARY
            echo "4. Commit fixes and re-run this workflow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Policy Documentation:** See \`policies/README.md\` for policy details and examples" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Production deployments cannot proceed with security policy violations**" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ $SECURITY_VIOLATIONS -gt 0 ]; then
            echo "⚠️ **SECURITY VIOLATIONS FOUND** - Review and fix security issues for $TARGET_ENV environment" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 For Engineers - Security Issues Detected:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:**" >> $GITHUB_STEP_SUMMARY
            echo "- Review security policy violations above" >> $GITHUB_STEP_SUMMARY
            echo "- While $TARGET_ENV deployment is allowed, these should be fixed" >> $GITHUB_STEP_SUMMARY
            echo "- Use \`conftest verify --policy policies/foundation-security.rego plan.json\` to test fixes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **These violations will block production deployment** - fix before promoting to prod" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 **ALL POLICIES COMPLIANT** - Infrastructure meets security and compliance standards" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **OPA Validation Complete:** No security violations or compliance issues found" >> $GITHUB_STEP_SUMMARY
          fi

  unit-tests:
    name: "🧪 Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: info
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.info.outputs.commit_sha }}

      - name: Setup OpenTofu
        run: |
          curl -L -o /tmp/tofu.zip https://github.com/opentofu/opentofu/releases/download/v${{ env.OPENTOFU_VERSION }}/tofu_${{ env.OPENTOFU_VERSION }}_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/
          
          # Install jq for JSON processing in test results
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run Unit Tests
        run: |
          echo "## 🧪 Unit Tests - ${{ needs.info.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY

          if [ -f "test/unit/run-tests.sh" ]; then
            chmod +x test/unit/run-tests.sh
            
            # Run unit tests and capture detailed results
            TEST_FAILED=0
            TOTAL_TESTS=0
            TOTAL_INDIVIDUAL_TESTS=0
            PASSED_INDIVIDUAL_TESTS=0
            FAILED_TEST_DETAILS=()

            echo "**Running Individual Test Suites:**" >> $GITHUB_STEP_SUMMARY

            for test_file in test/unit/test-*.sh; do
              if [[ -f "$test_file" && ! "$test_file" == *".disabled" ]]; then
                test_name=$(basename "$test_file" .sh)
                echo "Running $test_name..."

                if bash "$test_file"; then
                  echo "- ✅ $test_name: PASSED" >> $GITHUB_STEP_SUMMARY

                  # Update individual test counts for passing tests
                  result_file="test/unit/test-results/${test_name/test-/}-tests-report.json"
                  if [ -f "$result_file" ]; then
                    suite_total=$(jq -r '.summary.total_tests // 0' "$result_file" 2>/dev/null || echo "0")
                    TOTAL_INDIVIDUAL_TESTS=$((TOTAL_INDIVIDUAL_TESTS + suite_total))
                    PASSED_INDIVIDUAL_TESTS=$((PASSED_INDIVIDUAL_TESTS + suite_total))
                  fi
                else
                  echo "- ❌ $test_name: FAILED" >> $GITHUB_STEP_SUMMARY
                  TEST_FAILED=1

                  # Extract failure details from test result file if it exists
                  result_file="test/unit/test-results/${test_name/test-/}-tests-report.json"
                  if [ -f "$result_file" ]; then
                    # Get basic stats
                    suite_total=$(jq -r '.summary.total_tests // 0' "$result_file" 2>/dev/null || echo "0")
                    suite_failed=$(jq -r '.summary.failed_tests // 0' "$result_file" 2>/dev/null || echo "0")

                    # Add to overall counts
                    TOTAL_INDIVIDUAL_TESTS=$((TOTAL_INDIVIDUAL_TESTS + suite_total))
                    PASSED_INDIVIDUAL_TESTS=$((PASSED_INDIVIDUAL_TESTS + suite_total - suite_failed))

                    # Extract specific failure details from log file
                    log_file="test/unit/test-results/test-${test_name/test-/}.log"
                    if [ -f "$log_file" ]; then
                      # Extract each failed test as a separate bullet point
                      while IFS= read -r failed_line; do
                        if [ -n "$failed_line" ]; then
                          test_detail=$(echo "$failed_line" | sed 's/.*❌ //' | sed 's/: /: /')
                          FAILED_TEST_DETAILS+=("$test_detail")
                        fi
                      done < <(grep "❌" "$log_file" | head -5)
                    fi
                  else
                    # Fallback if no result file
                    FAILED_TEST_DETAILS+=("$test_name: Test suite failed (details not available)")
                  fi
                fi

                TOTAL_TESTS=$((TOTAL_TESTS + 1))
              fi
            done

            # Display comprehensive summary
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Test Suite Summary:**" >> $GITHUB_STEP_SUMMARY
            echo "- Test Suites: $(($TOTAL_TESTS - $TEST_FAILED)) passed, $TEST_FAILED failed, $TOTAL_TESTS total" >> $GITHUB_STEP_SUMMARY

            if [ $TOTAL_INDIVIDUAL_TESTS -gt 0 ]; then
              success_rate=$(( (PASSED_INDIVIDUAL_TESTS * 100) / TOTAL_INDIVIDUAL_TESTS ))
              echo "- Individual Tests: $PASSED_INDIVIDUAL_TESTS passed, $(($TOTAL_INDIVIDUAL_TESTS - $PASSED_INDIVIDUAL_TESTS)) failed, $TOTAL_INDIVIDUAL_TESTS total" >> $GITHUB_STEP_SUMMARY
              echo "- Success Rate: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
            fi

            # Show specific failure details
            if [ $TEST_FAILED -gt 0 ] && [ ${#FAILED_TEST_DETAILS[@]} -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Failed Test Details:**" >> $GITHUB_STEP_SUMMARY
              for detail in "${FAILED_TEST_DETAILS[@]}"; do
                echo "- $detail" >> $GITHUB_STEP_SUMMARY
              done
            fi

            if [ $TEST_FAILED -eq 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✅ All unit tests passed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "❌ One or more unit tests failed - see details above" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "⚠️ No unit tests found - skipping" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ needs.info.outputs.test_id }}
          path: test/unit/test-results/
          retention-days: 7


  summary:
    name: "📊 Test Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [info, policy-validation, unit-tests]
    if: always()
    steps:
      - name: Download Unit Test Results
        id: download-test-results
        continue-on-error: true
        run: |
          echo "Attempting to download unit test results: unit-test-results-${{ needs.info.outputs.test_id }}"
          mkdir -p ./test-results
          echo "test-results-available=false" >> $GITHUB_OUTPUT

      - name: Test Summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || needs.unit-tests.result == 'skipped' && '➖ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Policy Validation | ${{ needs.policy-validation.result == 'success' && '✅ Passed' || needs.policy-validation.result == 'skipped' && '➖ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Display detailed unit test results if available
          if [ -f "./test-results/test-summary.json" ]; then
            TOTAL_TESTS=$(jq -r '.individual_tests.total' ./test-results/test-summary.json 2>/dev/null || echo "N/A")
            PASSED_TESTS=$(jq -r '.individual_tests.passed' ./test-results/test-summary.json 2>/dev/null || echo "N/A")
            FAILED_TESTS=$(jq -r '.individual_tests.failed' ./test-results/test-summary.json 2>/dev/null || echo "N/A")
            SUCCESS_RATE=$(jq -r '.individual_tests.success_rate' ./test-results/test-summary.json 2>/dev/null || echo "N/A")

            echo "### 🧪 Unit Tests Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Tests**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed**: $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Success Rate**: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show failed test details if any failures occurred
            if [ "$FAILED_TESTS" != "0" ] && [ "$FAILED_TESTS" != "N/A" ]; then
              echo "### ❌ Failed Test Details" >> $GITHUB_STEP_SUMMARY

              # Look for failed test suite logs
              for log_file in ./test-results/*.log; do
                if [ -f "$log_file" ] && grep -q "❌" "$log_file"; then
                  suite_name=$(basename "$log_file" .log)
                  echo "#### **$suite_name**" >> $GITHUB_STEP_SUMMARY

                  # Extract and show key failure information
                  grep "❌" "$log_file" | head -3 | while read -r line; do
                    clean_error=$(echo "$line" | sed 's/.*❌ //' | sed 's/^[0-9-]* [0-9:]* - //')
                    echo "- $clean_error" >> $GITHUB_STEP_SUMMARY
                  done
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi
              done
            fi
          elif [ "${{ needs.unit-tests.result }}" = "failure" ]; then
            echo "### 🧪 Unit Tests Details" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Unit tests failed** - Detailed results not available for analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Check overall status
          FAILED_JOBS=""
          if [ "${{ needs.unit-tests.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Unit-Tests "; fi
          if [ "${{ needs.policy-validation.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Policy "; fi

          if [ -z "$FAILED_JOBS" ]; then
            echo "🎉 **ALL TESTS PASSED** - Ready for RUN phase" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TESTS FAILED** - Failed jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Next Steps for Engineers:" >> $GITHUB_STEP_SUMMARY
            if [[ "$FAILED_JOBS" == *"Unit-Tests"* ]]; then
              echo "- Review unit test failures above for specific issues" >> $GITHUB_STEP_SUMMARY
              echo "- Run \`test/unit/run-tests.sh\` locally to reproduce" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$FAILED_JOBS" == *"Policy"* ]]; then
              echo "- Check policy validation errors for security compliance issues" >> $GITHUB_STEP_SUMMARY
              echo "- Review Terraform configuration against security policies" >> $GITHUB_STEP_SUMMARY
            fi
            exit 1
          fi
