name: TEST - Quality Gates and Validation

on:
  workflow_run:
    workflows: ["BUILD - Code Validation and Artifact Creation"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_build_check:
        description: 'Skip BUILD workflow dependency check'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Target test environment'
        required: false
        type: choice
        options: [dev, staging, prod]
        default: dev

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}
  TF_IN_AUTOMATION: true

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  info:
    name: "📋 Test Information"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      target_environment: ${{ steps.info.outputs.target_environment }}
      test_id: ${{ steps.info.outputs.test_id }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}
    steps:
      - name: Determine Test Configuration
        id: info
        run: |
          TEST_ID="test-$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_ENV="${{ inputs.environment }}"
            COMMIT_SHA="${{ github.sha }}"
            TRIGGER_SOURCE="manual dispatch"
            BUILD_CHECK="${{ inputs.skip_build_check }}"
          else
            # Triggered by BUILD workflow
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
              if [ "${{ inputs.skip_build_check }}" != "true" ]; then
                echo "❌ BUILD workflow failed - aborting tests"
                exit 1
              fi
            fi

            BRANCH="${{ github.event.workflow_run.head_branch }}"
            case "$BRANCH" in
              main) TARGET_ENV="staging" ;;
              *) TARGET_ENV="dev" ;;
            esac

            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
            TRIGGER_SOURCE="automatic via BUILD workflow"
          fi

          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "test_id=$TEST_ID" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          echo "# 🧪 TEST Phase" >> $GITHUB_STEP_SUMMARY
          echo "- **Test ID**: $TEST_ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $TARGET_ENV ($TRIGGER_SOURCE)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY

  policy-validation:
    name: "📋 Policy Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: info
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.info.outputs.commit_sha }}

      - name: Setup OpenTofu and Policy Tools
        run: |
          # Install OpenTofu
          curl -L -o /tmp/tofu.zip \
            https://github.com/opentofu/opentofu/releases/download/v${{ env.OPENTOFU_VERSION }}/tofu_${{ env.OPENTOFU_VERSION }}_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/

          # Install OPA
          OPA_VERSION=v1.8.0
          curl -L -o /tmp/opa \
            https://openpolicyagent.org/downloads/${OPA_VERSION}/opa_linux_amd64_static
          chmod +x /tmp/opa
          sudo mv /tmp/opa /usr/local/bin/

          # Install Conftest
          CONFTEST_VERSION=0.62.0
          curl -L -o /tmp/conftest.tar.gz \
            https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz
          cd /tmp && tar xzf conftest.tar.gz
          sudo mv /tmp/conftest /usr/local/bin/
          chmod +x /usr/local/bin/conftest

          # Verify installations
          echo "=== Tool Verification ==="
          tofu version || exit 1
          opa version || exit 1
          conftest --version || exit 1
          echo "✅ All policy tools installed successfully"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-session-name: github-actions-policy-validation-${{ github.run_id }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          audience: sts.amazonaws.com

      - name: Policy Validation with OPA
        working-directory: terraform/workloads/static-site
        env:
          TARGET_ENV: ${{ needs.info.outputs.target_environment }}
        run: |
          echo "## 📋 Policy Validation with OPA - $TARGET_ENV" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create temporary local backend override
          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate.policy"
            }
          }
          EOF

          # Initialize and generate plan
          tofu init -reconfigure

          # Configuration validation
          echo "**🔍 Configuration Validation:**" >> $GITHUB_STEP_SUMMARY
          if tofu validate; then
            echo "✅ Terraform configuration syntax is valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform configuration validation failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Generate plan
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📋 Generating Plan for Policy Analysis:**" >> $GITHUB_STEP_SUMMARY

          TFVARS_FILE="environments/$TARGET_ENV.tfvars"

          # Remove any existing plan file
          rm -f policy.tfplan

          # Run the plan command
          set +e
          if [ -f "$TFVARS_FILE" ]; then
            tofu plan -var-file="$TFVARS_FILE" \
              -var="github_repository=${{ github.repository }}" \
              -out=policy.tfplan -refresh=false
            PLAN_EXIT_CODE=$?
          else
            tofu plan -var="environment=$TARGET_ENV" \
              -var="github_repository=${{ github.repository }}" \
              -out=policy.tfplan -refresh=false
            PLAN_EXIT_CODE=$?
          fi
          set -e

          # Check if plan file was created
          if [ -f "policy.tfplan" ]; then
            echo "✅ Plan file generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **PLAN GENERATION FAILED**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Convert plan to JSON
          tofu show -json policy.tfplan > plan.json

          # Copy policy files
          cp ../../../policies/*.rego . || exit 1

          # Run security policies
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🛡️ OPA Security Policy Validation:**" >> $GITHUB_STEP_SUMMARY

          SECURITY_VIOLATIONS=0
          set +e
          conftest test --policy foundation-security.rego plan.json \
            --namespace terraform.foundation.security
          SECURITY_EXIT_CODE=$?
          set -e

          if [ $SECURITY_EXIT_CODE -eq 0 ]; then
            echo "✅ All security policies passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security policy violations found" >> $GITHUB_STEP_SUMMARY
            SECURITY_VIOLATIONS=1
          fi

          # Run compliance policies
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📋 OPA Compliance Policy Validation:**" >> $GITHUB_STEP_SUMMARY

          set +e
          conftest test --policy foundation-compliance.rego plan.json \
            --namespace terraform.foundation.compliance
          COMPLIANCE_EXIT_CODE=$?
          set -e

          if [ $COMPLIANCE_EXIT_CODE -eq 0 ]; then
            echo "✅ All compliance policies passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Compliance policy warnings found" >> $GITHUB_STEP_SUMMARY
          fi

          # Environment-specific enforcement
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$TARGET_ENV" = "prod" ] && [ $SECURITY_VIOLATIONS -gt 0 ]; then
            echo "❌ **POLICY VALIDATION FAILED** - Production deployment blocked" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ $SECURITY_VIOLATIONS -gt 0 ]; then
            echo "⚠️ **SECURITY VIOLATIONS FOUND** - Review for $TARGET_ENV environment" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 **ALL POLICIES COMPLIANT**" >> $GITHUB_STEP_SUMMARY
          fi

  summary:
    name: "📊 Test Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [info, policy-validation]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY

          POLICY_STATUS="${{ needs.policy-validation.result }}"
          if [ "$POLICY_STATUS" = "success" ]; then
            echo "| Policy Validation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "$POLICY_STATUS" = "skipped" ]; then
            echo "| Policy Validation | ➖ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Policy Validation | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$POLICY_STATUS" = "success" ]; then
            echo "🎉 **ALL TESTS PASSED** - Ready for RUN phase" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TESTS FAILED** - Check policy validation results" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi