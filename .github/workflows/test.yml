name: TEST - Quality Gates and Validation (Streamlined)

on:
  workflow_run:
    workflows: ["BUILD - Security Scanning and Validation"]
    types: [completed]
    branches: [main, 'feature/*', 'bugfix/*', 'hotfix/*']
  workflow_dispatch:
    inputs:
      skip_build_check:
        description: 'Skip BUILD workflow dependency check'
        required: false
        type: boolean
        default: false
      environment:
        description: 'Target test environment'
        required: false
        type: choice
        options: [dev, staging, prod]
        default: dev

permissions:
  contents: read
  security-events: write
  actions: read

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}
  TF_IN_AUTOMATION: true

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  info:
    name: "üìã Test Information"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      target_environment: ${{ steps.info.outputs.target_environment }}
      test_id: ${{ steps.info.outputs.test_id }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}
    steps:
      - name: Determine Test Configuration
        id: info
        run: |
          TEST_ID="test-$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_ENV="${{ inputs.environment }}"
            COMMIT_SHA="${{ github.sha }}"
            TRIGGER_SOURCE="manual dispatch"
            BUILD_CHECK="${{ inputs.skip_build_check }}"
          else
            # Triggered by BUILD workflow
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ] && [ "$BUILD_CHECK" != "true" ]; then
              echo "‚ùå BUILD workflow failed - aborting tests"
              exit 1
            fi

            BRANCH="${{ github.event.workflow_run.head_branch }}"
            case "$BRANCH" in
              main) TARGET_ENV="staging" ;;
              *) TARGET_ENV="dev" ;;
            esac

            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
            TRIGGER_SOURCE="automatic via BUILD workflow"
          fi

          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "test_id=$TEST_ID" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

          echo "# üß™ TEST Phase - Streamlined" >> $GITHUB_STEP_SUMMARY
          echo "- **Test ID**: $TEST_ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $TARGET_ENV ($TRIGGER_SOURCE)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY

  policy-validation:
    name: "üìã Policy Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: info
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.info.outputs.commit_sha }}

      - name: Setup OpenTofu
        run: |
          curl -L -o /tmp/tofu.zip https://github.com/opentofu/opentofu/releases/download/v${{ env.OPENTOFU_VERSION }}/tofu_${{ env.OPENTOFU_VERSION }}_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/

      - name: Policy Validation with OPA
        working-directory: terraform/workloads/static-site
        env:
          TARGET_ENV: ${{ needs.info.outputs.target_environment }}
        run: |
          echo "## üìã Policy Validation - $TARGET_ENV" >> $GITHUB_STEP_SUMMARY

          # Create temporary local backend override for validation
          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate.policy"
            }
          }
          EOF
          
          # Initialize with local backend
          tofu init -reconfigure
          
          TFVARS_FILE="environments/$TARGET_ENV.tfvars"
          if [ -f "$TFVARS_FILE" ]; then
            tofu plan -var-file="$TFVARS_FILE" -var="github_repository=${{ github.repository }}" -out=policy.tfplan
          else
            tofu plan -var="environment=$TARGET_ENV" -var="github_repository=${{ github.repository }}" -out=policy.tfplan
          fi

          # Convert to JSON for policy evaluation
          tofu show -json policy.tfplan > plan.json

          # Policy validation results
          POLICY_VIOLATIONS=0

          # Check for required security configurations
          echo "**Security Policy Validation:**" >> $GITHUB_STEP_SUMMARY

          # Check encryption settings
          if jq -e '.planned_values.root_module.resources[] | select(.type == "aws_s3_bucket" and (.values.server_side_encryption_configuration | length == 0))' plan.json >/dev/null; then
            echo "‚ùå S3 buckets must have encryption enabled" >> $GITHUB_STEP_SUMMARY
            POLICY_VIOLATIONS=$((POLICY_VIOLATIONS + 1))
          else
            echo "‚úÖ S3 encryption policy compliant" >> $GITHUB_STEP_SUMMARY
          fi

          # Check CloudFront security headers
          if [ "$TARGET_ENV" = "prod" ]; then
            if ! jq -e '.planned_values.root_module.resources[] | select(.type == "aws_cloudfront_distribution")' plan.json >/dev/null; then
              echo "‚ùå Production deployments must use CloudFront" >> $GITHUB_STEP_SUMMARY
              POLICY_VIOLATIONS=$((POLICY_VIOLATIONS + 1))
            else
              echo "‚úÖ CloudFront distribution policy compliant" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Environment-specific policy enforcement
          if [ "$TARGET_ENV" = "prod" ] && [ $POLICY_VIOLATIONS -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **POLICY VALIDATION FAILED** - Production deployment blocked" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ $POLICY_VIOLATIONS -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **POLICY VIOLATIONS FOUND** - Warning for $TARGET_ENV environment" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **ALL POLICIES COMPLIANT**" >> $GITHUB_STEP_SUMMARY
          fi

  unit-tests:
    name: "üß™ Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: info
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.info.outputs.commit_sha }}

      - name: Setup OpenTofu
        run: |
          curl -L -o /tmp/tofu.zip https://github.com/opentofu/opentofu/releases/download/v${{ env.OPENTOFU_VERSION }}/tofu_${{ env.OPENTOFU_VERSION }}_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/
          
          # Install jq for JSON processing in test results
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run Unit Tests
        run: |
          echo "## üß™ Unit Tests - ${{ needs.info.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY

          if [ -f "test/unit/run-tests.sh" ]; then
            chmod +x test/unit/run-tests.sh
            
            # Run unit tests and capture detailed results
            TEST_FAILED=0
            TOTAL_TESTS=0
            TOTAL_INDIVIDUAL_TESTS=0
            PASSED_INDIVIDUAL_TESTS=0
            FAILED_TEST_DETAILS=()

            echo "**Running Individual Test Suites:**" >> $GITHUB_STEP_SUMMARY

            for test_file in test/unit/test-*.sh; do
              if [[ -f "$test_file" && ! "$test_file" == *".disabled" ]]; then
                test_name=$(basename "$test_file" .sh)
                echo "Running $test_name..."

                if bash "$test_file"; then
                  echo "- ‚úÖ $test_name: PASSED" >> $GITHUB_STEP_SUMMARY

                  # Update individual test counts for passing tests
                  result_file="test/unit/test-results/${test_name/test-/}-tests-report.json"
                  if [ -f "$result_file" ]; then
                    suite_total=$(jq -r '.summary.total_tests // 0' "$result_file" 2>/dev/null || echo "0")
                    TOTAL_INDIVIDUAL_TESTS=$((TOTAL_INDIVIDUAL_TESTS + suite_total))
                    PASSED_INDIVIDUAL_TESTS=$((PASSED_INDIVIDUAL_TESTS + suite_total))
                  fi
                else
                  echo "- ‚ùå $test_name: FAILED" >> $GITHUB_STEP_SUMMARY
                  TEST_FAILED=1

                  # Extract failure details from test result file if it exists
                  result_file="test/unit/test-results/${test_name/test-/}-tests-report.json"
                  if [ -f "$result_file" ]; then
                    # Get basic stats
                    suite_total=$(jq -r '.summary.total_tests // 0' "$result_file" 2>/dev/null || echo "0")
                    suite_failed=$(jq -r '.summary.failed_tests // 0' "$result_file" 2>/dev/null || echo "0")

                    # Add to overall counts
                    TOTAL_INDIVIDUAL_TESTS=$((TOTAL_INDIVIDUAL_TESTS + suite_total))
                    PASSED_INDIVIDUAL_TESTS=$((PASSED_INDIVIDUAL_TESTS + suite_total - suite_failed))

                    # Extract specific failure details from log file
                    log_file="test/unit/test-results/test-${test_name/test-/}.log"
                    if [ -f "$log_file" ]; then
                      # Extract each failed test as a separate bullet point
                      while IFS= read -r failed_line; do
                        if [ -n "$failed_line" ]; then
                          test_detail=$(echo "$failed_line" | sed 's/.*‚ùå //' | sed 's/: /: /')
                          FAILED_TEST_DETAILS+=("$test_detail")
                        fi
                      done < <(grep "‚ùå" "$log_file" | head -5)
                    fi
                  else
                    # Fallback if no result file
                    FAILED_TEST_DETAILS+=("$test_name: Test suite failed (details not available)")
                  fi
                fi

                TOTAL_TESTS=$((TOTAL_TESTS + 1))
              fi
            done

            # Display comprehensive summary
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Test Suite Summary:**" >> $GITHUB_STEP_SUMMARY
            echo "- Test Suites: $(($TOTAL_TESTS - $TEST_FAILED)) passed, $TEST_FAILED failed, $TOTAL_TESTS total" >> $GITHUB_STEP_SUMMARY

            if [ $TOTAL_INDIVIDUAL_TESTS -gt 0 ]; then
              success_rate=$(( (PASSED_INDIVIDUAL_TESTS * 100) / TOTAL_INDIVIDUAL_TESTS ))
              echo "- Individual Tests: $PASSED_INDIVIDUAL_TESTS passed, $(($TOTAL_INDIVIDUAL_TESTS - $PASSED_INDIVIDUAL_TESTS)) failed, $TOTAL_INDIVIDUAL_TESTS total" >> $GITHUB_STEP_SUMMARY
              echo "- Success Rate: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
            fi

            # Show specific failure details
            if [ $TEST_FAILED -gt 0 ] && [ ${#FAILED_TEST_DETAILS[@]} -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Failed Test Details:**" >> $GITHUB_STEP_SUMMARY
              for detail in "${FAILED_TEST_DETAILS[@]}"; do
                echo "- $detail" >> $GITHUB_STEP_SUMMARY
              done
            fi

            if [ $TEST_FAILED -eq 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ All unit tests passed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ùå One or more unit tests failed - see details above" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No unit tests found - skipping" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ needs.info.outputs.test_id }}
          path: test/unit/test-results/
          retention-days: 7


  summary:
    name: "üìä Test Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [info, policy-validation, unit-tests]
    if: always()
    steps:
      - name: Download Unit Test Results
        id: download-test-results
        continue-on-error: true
        run: |
          echo "Attempting to download unit test results: unit-test-results-${{ needs.info.outputs.test_id }}"
          mkdir -p ./test-results
          echo "test-results-available=false" >> $GITHUB_OUTPUT

      - name: Test Summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '‚úÖ Passed' || needs.unit-tests.result == 'skipped' && '‚ûñ Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Policy Validation | ${{ needs.policy-validation.result == 'success' && '‚úÖ Passed' || needs.policy-validation.result == 'skipped' && '‚ûñ Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Display detailed unit test results if available
          if [ -f "./test-results/test-summary.json" ]; then
            TOTAL_TESTS=$(jq -r '.individual_tests.total' ./test-results/test-summary.json 2>/dev/null || echo "N/A")
            PASSED_TESTS=$(jq -r '.individual_tests.passed' ./test-results/test-summary.json 2>/dev/null || echo "N/A")
            FAILED_TESTS=$(jq -r '.individual_tests.failed' ./test-results/test-summary.json 2>/dev/null || echo "N/A")
            SUCCESS_RATE=$(jq -r '.individual_tests.success_rate' ./test-results/test-summary.json 2>/dev/null || echo "N/A")

            echo "### üß™ Unit Tests Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Tests**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed**: $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Success Rate**: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Show failed test details if any failures occurred
            if [ "$FAILED_TESTS" != "0" ] && [ "$FAILED_TESTS" != "N/A" ]; then
              echo "### ‚ùå Failed Test Details" >> $GITHUB_STEP_SUMMARY

              # Look for failed test suite logs
              for log_file in ./test-results/*.log; do
                if [ -f "$log_file" ] && grep -q "‚ùå" "$log_file"; then
                  suite_name=$(basename "$log_file" .log)
                  echo "#### **$suite_name**" >> $GITHUB_STEP_SUMMARY

                  # Extract and show key failure information
                  grep "‚ùå" "$log_file" | head -3 | while read -r line; do
                    clean_error=$(echo "$line" | sed 's/.*‚ùå //' | sed 's/^[0-9-]* [0-9:]* - //')
                    echo "- $clean_error" >> $GITHUB_STEP_SUMMARY
                  done
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi
              done
            fi
          elif [ "${{ needs.unit-tests.result }}" = "failure" ]; then
            echo "### üß™ Unit Tests Details" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Unit tests failed** - Detailed results not available for analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Check overall status
          FAILED_JOBS=""
          if [ "${{ needs.unit-tests.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Unit-Tests "; fi
          if [ "${{ needs.policy-validation.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Policy "; fi

          if [ -z "$FAILED_JOBS" ]; then
            echo "üéâ **ALL TESTS PASSED** - Ready for RUN phase" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **TESTS FAILED** - Failed jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß Next Steps for Engineers:" >> $GITHUB_STEP_SUMMARY
            if [[ "$FAILED_JOBS" == *"Unit-Tests"* ]]; then
              echo "- Review unit test failures above for specific issues" >> $GITHUB_STEP_SUMMARY
              echo "- Run \`test/unit/run-tests.sh\` locally to reproduce" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$FAILED_JOBS" == *"Policy"* ]]; then
              echo "- Check policy validation errors for security compliance issues" >> $GITHUB_STEP_SUMMARY
              echo "- Review Terraform configuration against security policies" >> $GITHUB_STEP_SUMMARY
            fi
            if [[ "$FAILED_JOBS" == *"Cost"* ]]; then
              echo "- Review cost estimation for budget compliance" >> $GITHUB_STEP_SUMMARY
              echo "- Consider resource optimization if costs exceed limits" >> $GITHUB_STEP_SUMMARY
            fi
            exit 1
          fi
