name: RELEASE - Production Deployments

on:
  push:
    tags:
      - 'v*.*.*'  # Production releases only (v1.0.0, v1.1.0, etc.)
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
        type: string
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        type: boolean
        default: true
      deploy_website:
        description: 'Deploy website content'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  actions: read
  id-token: write

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}
  TF_IN_AUTOMATION: true

concurrency:
  group: release-production
  cancel-in-progress: false  # Never cancel production deployments

jobs:
  info:
    name: "📋 Release Information"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      version: ${{ steps.info.outputs.version }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}
      deploy_infrastructure: ${{ steps.info.outputs.deploy_infrastructure }}
      deploy_website: ${{ steps.info.outputs.deploy_website }}
      deployment_id: ${{ steps.info.outputs.deployment_id }}
      is_valid_release: ${{ steps.info.outputs.is_valid_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Release Info
        id: info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version_tag }}"
            COMMIT_SHA="${{ github.sha }}"
            DEPLOY_INFRA="${{ inputs.deploy_infrastructure }}"
            DEPLOY_WEBSITE="${{ inputs.deploy_website }}"
            TRIGGER_SOURCE="manual dispatch"

            # Validate version format for manual dispatch
            if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              IS_VALID_RELEASE="true"
            else
              echo "❌ Invalid version format: $VERSION"
              echo "Use format: v1.0.0"
              IS_VALID_RELEASE="false"
            fi
          else
            # Triggered by tag push
            VERSION="${GITHUB_REF#refs/tags/}"
            COMMIT_SHA="${{ github.sha }}"
            DEPLOY_INFRA="true"
            DEPLOY_WEBSITE="true"
            TRIGGER_SOURCE="tag push"

            # Validate this is a production release tag (no pre-release suffixes)
            if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              IS_VALID_RELEASE="true"
            else
              echo "⚠️ Skipping non-production tag: $VERSION"
              echo "Production releases use format: v1.0.0"
              IS_VALID_RELEASE="false"
            fi
          fi

          DEPLOYMENT_ID="release-$VERSION-$(date +%Y%m%d-%H%M%S)"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "deploy_infrastructure=$DEPLOY_INFRA" >> $GITHUB_OUTPUT
          echo "deploy_website=$DEPLOY_WEBSITE" >> $GITHUB_OUTPUT
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "is_valid_release=$IS_VALID_RELEASE" >> $GITHUB_OUTPUT

          echo "# 🚀 Production Release Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: $TRIGGER_SOURCE" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "- **Valid Release**: $IS_VALID_RELEASE" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: $DEPLOYMENT_ID" >> $GITHUB_STEP_SUMMARY

  authorization:
    name: "🔐 Production Authorization"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: info
    if: needs.info.outputs.is_valid_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Production Authorization Check
        run: |
          echo "🔐 **Production Release Authorization**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.info.outputs.version }}" >> \
            $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY

          # Check CODEOWNERS for authorization
          ACTOR="${{ github.actor }}"
          if [ -f ".github/CODEOWNERS" ]; then
            CODE_OWNERS=$(grep -E '^(\*|/)' .github/CODEOWNERS | \
              grep -oE '@[a-zA-Z0-9_-]+' | sort -u || echo "")

            if echo "$CODE_OWNERS" | grep -q "@$ACTOR"; then
              echo "✅ **AUTHORIZED**: $ACTOR is a code owner" >> \
                $GITHUB_STEP_SUMMARY
            else
              echo "❌ **UNAUTHORIZED**: $ACTOR is not a code owner" >> \
                $GITHUB_STEP_SUMMARY
              echo "Code owners: $CODE_OWNERS" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "⚠️ No CODEOWNERS file found - proceeding" >> \
              $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **PRODUCTION DEPLOYMENT AUTHORIZED**" >> \
            $GITHUB_STEP_SUMMARY

  deploy:
    name: "🎯 Deploy to Production"
    uses: ./.github/workflows/deploy-composite.yml
    needs: [info, authorization]
    if: needs.info.outputs.is_valid_release == 'true' && needs.authorization.result == 'success'
    with:
      environment: prod
      ref: ${{ needs.info.outputs.commit_sha }}
      deploy_infrastructure: ${{ needs.info.outputs.deploy_infrastructure == 'true' }}
      deploy_website: ${{ needs.info.outputs.deploy_website == 'true' }}
      deployment_id: ${{ needs.info.outputs.deployment_id }}
      tag: ${{ needs.info.outputs.version }}

  release-notes:
    name: "📝 Create Release Notes"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [info, deploy]
    if: needs.info.outputs.is_valid_release == 'true' && needs.deploy.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.info.outputs.version }}';
            const deploymentUrl = '${{ needs.deploy.outputs.deployment_url }}';
            const deploymentStatus = '${{ needs.deploy.outputs.deployment_status }}';

            // Get previous tag for changelog
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            const currentTagIndex = tags.findIndex(tag => tag.name === version);
            const previousTag = currentTagIndex < tags.length - 1 ?
              tags[currentTagIndex + 1].name : null;

            // Generate release notes
            let releaseBody = `## 🎯 Production Release ${version}

            This release has been successfully deployed to production.

            `;

            if (deploymentUrl) {
              releaseBody += `🌐 **Live URL**: ${deploymentUrl}

              `;
            }

            if (previousTag) {
              const compareUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousTag}...${version}`;
              releaseBody += `📋 **Changes**: [View diff](${compareUrl})

              `;
            }

            releaseBody += `## Deployment Details

            - **Environment**: Production
            - **Status**: ${deploymentStatus}
            - **Deployment ID**: \`${{ needs.info.outputs.deployment_id }}\`
            - **Workflow**: [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            ---
            *Automated production release via GitHub Actions*`;

            // Create or update release
            try {
              // Check if release already exists
              let release;
              try {
                release = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: version
                });

                // Update existing release
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  body: releaseBody
                });

                console.log('✅ Updated existing release');
              } catch (error) {
                if (error.status === 404) {
                  // Create new release
                  await github.rest.repos.createRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: version,
                    name: `Release ${version}`,
                    body: releaseBody,
                    draft: false,
                    prerelease: false
                  });

                  console.log('✅ Created new release');
                } else {
                  throw error;
                }
              }
            } catch (error) {
              console.error('❌ Failed to create/update release:', error.message);
            }

  summary:
    name: "📊 Release Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [info, deploy, release-notes]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 📊 Production Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ needs.info.outputs.version }} |" >> \
            $GITHUB_STEP_SUMMARY
          echo "| Valid Release | ${{ needs.info.outputs.is_valid_release }} |" >> \
            $GITHUB_STEP_SUMMARY

          if [ "${{ needs.info.outputs.is_valid_release }}" = "true" ]; then
            DEPLOY_STATUS="${{ needs.deploy.result }}"
            if [ "$DEPLOY_STATUS" = "success" ]; then
              echo "| Deployment | ✅ Success |" >> $GITHUB_STEP_SUMMARY
              DEPLOY_URL="${{ needs.deploy.outputs.deployment_url }}"
              if [ -n "$DEPLOY_URL" ]; then
                echo "| Production URL | [$DEPLOY_URL]($DEPLOY_URL) |" >> \
                  $GITHUB_STEP_SUMMARY
              fi
            else
              echo "| Deployment | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi

            NOTES_STATUS="${{ needs.release-notes.result }}"
            echo "| Release Notes | ${{ needs.release-notes.result == 'success' && '✅ Created' || '❌ Failed' }} |" >> \
              $GITHUB_STEP_SUMMARY
          else
            echo "| Deployment | ➖ Skipped (invalid release) |" >> \
              $GITHUB_STEP_SUMMARY
            echo "| Release Notes | ➖ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "🎉 **PRODUCTION RELEASE SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ needs.deploy.outputs.deployment_url }}" ]; then
              echo "🌐 **Live at**: ${{ needs.deploy.outputs.deployment_url }}" >> \
                $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ needs.info.outputs.is_valid_release }}" = "false" ]; then
            echo "ℹ️ **INVALID RELEASE TAG** - No deployment needed" >> \
              $GITHUB_STEP_SUMMARY
          else
            echo "❌ **PRODUCTION RELEASE FAILED**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
