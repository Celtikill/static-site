name: Reusable Security Scanning Template

on:
  workflow_call:
    inputs:
      scan_type:
        description: 'Type of security scan to perform'
        required: true
        type: string
        # Options: 'infrastructure', 'code', 'dependencies', 'all'
      severity_threshold:
        description: 'Minimum severity level to report'
        required: false
        type: string
        default: 'medium'
        # Options: 'critical', 'high', 'medium', 'low'
      fail_on_findings:
        description: 'Whether to fail the workflow on security findings'
        required: false
        type: boolean
        default: true
      target_directory:
        description: 'Directory to scan'
        required: false
        type: string
        default: '.'
    outputs:
      scan_results:
        description: 'Summary of security scan results'
        value: ${{ jobs.security-scan.outputs.results }}
      findings_count:
        description: 'Number of security findings detected'
        value: ${{ jobs.security-scan.outputs.findings_count }}
      scan_status:
        description: 'Overall scan status'
        value: ${{ jobs.security-scan.outputs.status }}

defaults:
  run:
    shell: bash

env:
  TERM: xterm-256color
  FORCE_COLOR: "1"
  # Security tool configurations
  CHECKOV_QUIET: true
  TRIVY_QUIET: false
  TRIVY_FORMAT: sarif

jobs:
  security-scan:
    name: Security Scan (${{ inputs.scan_type }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    outputs:
      results: ${{ steps.consolidate-results.outputs.results }}
      findings_count: ${{ steps.consolidate-results.outputs.findings_count }}
      status: ${{ steps.consolidate-results.outputs.status }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Security Scanning Cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cache/trivy
            ~/.cache/checkov
          key: security-scan-${{ runner.os }}-${{ inputs.scan_type }}-${{ hashFiles('**/*.tf', '**/*.yml', '**/*.yaml', '**/*.json') }}
          restore-keys: |
            security-scan-${{ runner.os }}-${{ inputs.scan_type }}-
            security-scan-${{ runner.os }}-

      - name: Infrastructure Security Scan (Checkov)
        if: inputs.scan_type == 'infrastructure' || inputs.scan_type == 'all'
        id: checkov-scan
        continue-on-error: true
        run: |
          echo "üîç Running Checkov infrastructure security scan" >> $GITHUB_STEP_SUMMARY
          
          # Install Checkov
          pip3 install checkov
          
          # Run scan
          checkov \
            --directory ${{ inputs.target_directory }} \
            --output sarif \
            --output-file-path checkov-results.sarif \
            --quiet \
            --compact || true
            
          # Convert to GitHub format
          if [ -f "checkov-results.sarif" ]; then
            FINDINGS=$(jq '.runs[0].results | length' checkov-results.sarif 2>/dev/null || echo "0")
            echo "checkov_findings=$FINDINGS" >> $GITHUB_OUTPUT
            echo "üìä **Checkov Findings**: $FINDINGS" >> $GITHUB_STEP_SUMMARY
          else
            echo "checkov_findings=0" >> $GITHUB_OUTPUT
          fi

      - name: Code Security Scan (Trivy)
        if: inputs.scan_type == 'code' || inputs.scan_type == 'all'
        id: trivy-scan
        continue-on-error: true
        run: |
          echo "üîç Running Trivy code security scan" >> $GITHUB_STEP_SUMMARY
          
          # Install Trivy
          sudo apt-get update && sudo apt-get install -y wget
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
          
          # Run scan
          trivy fs \
            --format sarif \
            --output trivy-results.sarif \
            --severity ${{ inputs.severity_threshold | upper }} \
            ${{ inputs.target_directory }} || true
            
          if [ -f "trivy-results.sarif" ]; then
            FINDINGS=$(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "0")
            echo "trivy_findings=$FINDINGS" >> $GITHUB_OUTPUT
            echo "üìä **Trivy Findings**: $FINDINGS" >> $GITHUB_STEP_SUMMARY
          else
            echo "trivy_findings=0" >> $GITHUB_OUTPUT
          fi

      - name: Dependency Security Scan
        if: inputs.scan_type == 'dependencies' || inputs.scan_type == 'all'
        id: dependency-scan
        continue-on-error: true
        run: |
          echo "üîç Running dependency security scan" >> $GITHUB_STEP_SUMMARY
          
          DEPENDENCY_FINDINGS=0
          
          # Scan package.json if exists
          if [ -f "package.json" ]; then
            npm audit --audit-level=${{ inputs.severity_threshold }} --json > npm-audit.json 2>/dev/null || true
            if [ -f "npm-audit.json" ]; then
              NPM_FINDINGS=$(jq '.vulnerabilities | length' npm-audit.json 2>/dev/null || echo "0")
              DEPENDENCY_FINDINGS=$((DEPENDENCY_FINDINGS + NPM_FINDINGS))
              echo "üì¶ **NPM Vulnerabilities**: $NPM_FINDINGS" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Scan requirements.txt if exists
          if [ -f "requirements.txt" ]; then
            pip3 install safety
            safety check --json --output safety-results.json 2>/dev/null || true
            if [ -f "safety-results.json" ]; then
              SAFETY_FINDINGS=$(jq '. | length' safety-results.json 2>/dev/null || echo "0")
              DEPENDENCY_FINDINGS=$((DEPENDENCY_FINDINGS + SAFETY_FINDINGS))
              echo "üêç **Python Vulnerabilities**: $SAFETY_FINDINGS" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "dependency_findings=$DEPENDENCY_FINDINGS" >> $GITHUB_OUTPUT

      - name: Upload Security Scan Results
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: security-scan-results-${{ inputs.scan_type }}-${{ github.run_id }}
          path: |
            *.sarif
            *-results.json
          retention-days: 30

      - name: Upload SARIF Results to GitHub Security
        if: always() && (inputs.scan_type == 'code' || inputs.scan_type == 'all')
        uses: actions/upload-sarif@df52e2c8bd7f7b6baa60d6de6b2fb4e25e1d6d7d # v2.0.3
        with:
          sarif_file: |
            checkov-results.sarif
            trivy-results.sarif
        continue-on-error: true

      - name: Consolidate Scan Results
        id: consolidate-results
        if: always()
        run: |
          CHECKOV_FINDINGS="${{ steps.checkov-scan.outputs.checkov_findings || '0' }}"
          TRIVY_FINDINGS="${{ steps.trivy-scan.outputs.trivy_findings || '0' }}"
          DEPENDENCY_FINDINGS="${{ steps.dependency-scan.outputs.dependency_findings || '0' }}"
          
          TOTAL_FINDINGS=$((CHECKOV_FINDINGS + TRIVY_FINDINGS + DEPENDENCY_FINDINGS))
          
          echo "findings_count=$TOTAL_FINDINGS" >> $GITHUB_OUTPUT
          
          # Create summary
          RESULTS="Infrastructure: $CHECKOV_FINDINGS, Code: $TRIVY_FINDINGS, Dependencies: $DEPENDENCY_FINDINGS"
          echo "results=$RESULTS" >> $GITHUB_OUTPUT
          
          # Determine status
          if [ "$TOTAL_FINDINGS" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ **Security Scan**: No findings detected" >> $GITHUB_STEP_SUMMARY
          else
            if [ "${{ inputs.fail_on_findings }}" = "true" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
              echo "‚ùå **Security Scan**: $TOTAL_FINDINGS findings detected (failing)" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "status=warning" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è **Security Scan**: $TOTAL_FINDINGS findings detected (not failing)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Comment on Pull Request
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const results = `${{ steps.consolidate-results.outputs.results }}`;
            const totalFindings = ${{ steps.consolidate-results.outputs.findings_count }};
            const status = `${{ steps.consolidate-results.outputs.status }}`;
            
            const statusIcon = status === 'success' ? '‚úÖ' : status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';
            
            const comment = `## ${statusIcon} Security Scan Results
            
            **Scan Type**: ${{ inputs.scan_type }}
            **Total Findings**: ${totalFindings}
            **Details**: ${results}
            
            ${totalFindings > 0 ? '‚ö†Ô∏è Please review and address security findings before merging.' : '‚úÖ No security issues detected.'}
            
            <details>
            <summary>Scan Configuration</summary>
            
            - **Severity Threshold**: ${{ inputs.severity_threshold }}
            - **Fail on Findings**: ${{ inputs.fail_on_findings }}
            - **Target Directory**: ${{ inputs.target_directory }}
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });