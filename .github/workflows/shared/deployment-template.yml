name: Reusable Deployment Template

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: string
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        type: boolean
        default: true
      deploy_website:
        description: 'Deploy website content'
        required: false
        type: boolean
        default: true
      aws_region:
        description: 'AWS region for deployment'
        required: false
        type: string
        default: 'us-east-1'
    secrets:
      AWS_ASSUME_ROLE:
        description: 'AWS IAM role ARN for OIDC authentication'
        required: true
      ALERT_EMAIL_ADDRESSES:
        description: 'Email addresses for alerts (JSON array)'
        required: false
    outputs:
      deployment_status:
        description: 'Overall deployment status'
        value: ${{ jobs.deploy.outputs.status }}
      deployment_url:
        description: 'Deployed application URL'
        value: ${{ jobs.deploy.outputs.url }}
      deployment_id:
        description: 'Deployment identifier'
        value: ${{ jobs.deploy.outputs.deployment_id }}

defaults:
  run:
    shell: bash

env:
  TERM: xterm-256color
  FORCE_COLOR: "1"
  AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
  AWS_MAX_ATTEMPTS: 3
  TF_IN_AUTOMATION: true
  TF_CLI_ARGS: "-no-color"

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.environment == 'prod' && 20 || 15 }}
    permissions:
      id-token: write
      contents: read
      deployments: write
    outputs:
      status: ${{ steps.deployment-result.outputs.status }}
      url: ${{ steps.deployment-result.outputs.url }}
      deployment_id: ${{ steps.generate-id.outputs.deployment_id }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        
      - name: Generate Deployment ID
        id: generate-id
        run: |
          DEPLOYMENT_ID="deploy-${{ inputs.environment }}-$(date +%Y%m%d)-${GITHUB_RUN_ID:0:8}"
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "🆔 **Deployment ID**: $DEPLOYMENT_ID" >> $GITHUB_STEP_SUMMARY

      - name: Setup Infrastructure Tooling
        if: inputs.deploy_infrastructure
        uses: ./.github/actions/setup-infrastructure
        with:
          aws-region: ${{ inputs.aws_region }}
          aws-role: ${{ secrets.AWS_ASSUME_ROLE }}

      - name: Infrastructure Cache
        if: inputs.deploy_infrastructure
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ~/.cache/terraform
          key: terraform-${{ runner.os }}-${{ inputs.environment }}-${{ hashFiles('terraform/**/*.tf', 'terraform/**/*.hcl') }}
          restore-keys: |
            terraform-${{ runner.os }}-${{ inputs.environment }}-
            terraform-${{ runner.os }}-

      - name: Deploy Infrastructure
        if: inputs.deploy_infrastructure
        working-directory: terraform
        env:
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_alert_email_addresses: ${{ secrets.ALERT_EMAIL_ADDRESSES || '["admin@example.com"]' }}
        run: |
          echo "🏗️ Deploying infrastructure to ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          
          # Initialize Terraform
          tofu init -backend-config=backend-${{ inputs.environment }}.hcl
          
          # Plan and apply
          if tofu plan -detailed-exitcode -out=tfplan; then
            tofu apply -auto-approve tfplan
            echo "✅ Infrastructure deployment successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Infrastructure deployment failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Deploy Website Content
        if: inputs.deploy_website
        run: |
          echo "🌐 Deploying website content to ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          
          # Get S3 bucket name from Terraform output
          cd terraform
          S3_BUCKET=$(tofu output -raw s3_bucket_id 2>/dev/null || echo "")
          
          if [ -n "$S3_BUCKET" ]; then
            # Sync website files
            aws s3 sync ../src/ "s3://$S3_BUCKET" --delete \
              --cache-control "text/html:max-age=300,public" \
              --cache-control "text/css,application/javascript:max-age=31536000,public"
            
            # Invalidate CloudFront cache
            CF_DISTRIBUTION=$(tofu output -raw cloudfront_distribution_id 2>/dev/null || echo "")
            if [ -n "$CF_DISTRIBUTION" ]; then
              aws cloudfront create-invalidation \
                --distribution-id "$CF_DISTRIBUTION" \
                --paths "/*"
              echo "✅ CloudFront cache invalidated" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "✅ Website deployment successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No S3 bucket found - skipping website deployment" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create GitHub Deployment
        id: create-deployment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ inputs.environment }}',
              description: 'Automated deployment via reusable workflow',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              description: 'Deployment completed successfully',
              log_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
            
            return deployment.data.id;

      - name: Determine Deployment Result
        id: deployment-result
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "url=https://example.com" >> $GITHUB_OUTPUT  # Replace with actual URL logic
            echo "✅ **Deployment Status**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "url=" >> $GITHUB_OUTPUT
            echo "❌ **Deployment Status**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Cleanup on Failure
        if: failure() && !cancelled()
        run: |
          echo "🧹 Running cleanup after deployment failure" >> $GITHUB_STEP_SUMMARY
          # Add cleanup logic here