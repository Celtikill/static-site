name: DEPLOY - Static Website Deployment

on:
  workflow_dispatch:
    inputs:
      test_id:
        description: 'Test ID from TEST workflow (optional - will create new if not provided)'
        required: false
        type: string
      build_id:
        description: 'Build ID to reference (optional - will inherit from TEST)'
        required: false
        type: string
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev
      skip_test_check:
        description: 'Skip TEST workflow dependency check'
        required: false
        default: false
        type: boolean
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        default: true
        type: boolean
      deploy_website:
        description: 'Deploy website content'
        required: false
        default: true
        type: boolean
  workflow_run:
    workflows: ["TEST - Security and Validation"]
    types: [completed]
    branches:
      - main

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: static-site-deployment-${{ github.event.inputs.environment || 'dev' }}
  cancel-in-progress: false

jobs:
  deploy-info:
    name: Deployment Information
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      deploy_id: ${{ steps.generate-id.outputs.deploy_id }}
      test_id: ${{ steps.generate-id.outputs.test_id }}
      build_id: ${{ steps.generate-id.outputs.build_id }}
      target_environment: ${{ steps.generate-id.outputs.target_environment }}
      deploy_infrastructure: ${{ steps.generate-id.outputs.deploy_infrastructure }}
      deploy_website: ${{ steps.generate-id.outputs.deploy_website }}
      test_success: ${{ steps.check-test.outputs.test_success }}
      has_tf_changes: ${{ steps.detect-changes.outputs.has_tf_changes }}
      has_content_changes: ${{ steps.detect-changes.outputs.has_content_changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: Check TEST Status
        id: check-test
        if: github.event_name == 'workflow_run' && github.event.inputs.skip_test_check != 'true'
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "TEST workflow failed - cannot proceed with DEPLOY"
            echo "test_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "TEST workflow passed - proceeding with DEPLOY"
          echo "test_success=true" >> $GITHUB_OUTPUT

      - name: Download TEST Artifacts
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          run-id: ${{ github.event.workflow_run.id }}
          merge-multiple: true
        continue-on-error: true

      - name: Generate Deployment ID
        id: generate-id
        run: |
          # Secure input handling with validation
          TEST_ID_INPUT='${{ github.event.inputs.test_id }}'
          BUILD_ID_INPUT='${{ github.event.inputs.build_id }}'
          ENV_INPUT='${{ github.event.inputs.environment }}'
          
          # Input validation
          if [ -n "$TEST_ID_INPUT" ]; then
            if [ ${#TEST_ID_INPUT} -gt 100 ]; then
              echo "❌ ERROR: Test ID too long (max 100 chars)"
              exit 1
            fi
            if [[ ! "$TEST_ID_INPUT" =~ ^[a-zA-Z0-9_-]+$ ]]; then
              echo "❌ ERROR: Invalid characters in test ID"
              exit 1
            fi
          fi
          
          if [ -n "$BUILD_ID_INPUT" ]; then
            if [ ${#BUILD_ID_INPUT} -gt 100 ]; then
              echo "❌ ERROR: Build ID too long (max 100 chars)"
              exit 1
            fi
            if [[ ! "$BUILD_ID_INPUT" =~ ^[a-zA-Z0-9_-]+$ ]]; then
              echo "❌ ERROR: Invalid characters in build ID"
              exit 1
            fi
          fi
          
          # Set validated values
          if [ -n "$TEST_ID_INPUT" ]; then
            TEST_ID="$TEST_ID_INPUT"
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            TEST_ID="test-${{ github.event.workflow_run.id }}"
          else
            TEST_ID="test-${{ github.run_id }}-auto"
          fi
          
          if [ -n "$BUILD_ID_INPUT" ]; then
            BUILD_ID="$BUILD_ID_INPUT"
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            BUILD_ID=$(find . -name "*test*report*.json" -exec jq -r '.build_id // empty' {} \; | head -1 || echo "build-auto")
            if [ -z "$BUILD_ID" ] || [ "$BUILD_ID" = "null" ]; then
              BUILD_ID="build-auto"
            fi
          else
            BUILD_ID="build-${{ github.run_id }}-auto"
          fi
          
          if [ -n "$ENV_INPUT" ]; then
            TARGET_ENV="$ENV_INPUT"
          elif [ -n "${{ vars.DEFAULT_ENVIRONMENT }}" ]; then
            TARGET_ENV="${{ vars.DEFAULT_ENVIRONMENT }}"
          else
            TARGET_ENV="dev"
          fi
          
          DEPLOY_INFRASTRUCTURE="${{ github.event.inputs.deploy_infrastructure || 'true' }}"
          DEPLOY_WEBSITE="${{ github.event.inputs.deploy_website || 'true' }}"
          
          DEPLOY_ID="deploy-${{ github.run_id }}-${{ github.run_attempt }}"
          
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "test_id=$TEST_ID" >> $GITHUB_OUTPUT
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "deploy_infrastructure=$DEPLOY_INFRASTRUCTURE" >> $GITHUB_OUTPUT
          echo "deploy_website=$DEPLOY_WEBSITE" >> $GITHUB_OUTPUT
          
          echo "🚀 **DEPLOY Phase Started**" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: $DEPLOY_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Test ID**: $TEST_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Build ID**: $BUILD_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment**: $TARGET_ENV" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy Infrastructure**: $DEPLOY_INFRASTRUCTURE" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy Website**: $DEPLOY_WEBSITE" >> $GITHUB_STEP_SUMMARY

      - name: Detect Changes
        id: detect-changes
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Analyzing Changes for Deployment Optimization**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get changed files
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # For workflow_run events, get files from the triggering commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          else
            # For other events, compare with main branch
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD 2>/dev/null || echo "")
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          # Categorize changes
          HAS_TF_CHANGES=0
          HAS_CONTENT_CHANGES=0
          
          if [ -n "$CHANGED_FILES" ]; then
            # Check for infrastructure changes
            if echo "$CHANGED_FILES" | grep -qE '^terraform/.*\.(tf|tfvars)$'; then
              HAS_TF_CHANGES=1
            fi
            
            # Check for content changes
            if echo "$CHANGED_FILES" | grep -qE '^src/'; then
              HAS_CONTENT_CHANGES=1
            fi
          else
            # No changes detected, deploy everything if forced
            if [ "${{ github.event.inputs.deploy_infrastructure }}" = "true" ]; then
              HAS_TF_CHANGES=1
            fi
            if [ "${{ github.event.inputs.deploy_website }}" = "true" ]; then
              HAS_CONTENT_CHANGES=1
            fi
          fi
          
          echo "has_tf_changes=$HAS_TF_CHANGES" >> $GITHUB_OUTPUT
          echo "has_content_changes=$HAS_CONTENT_CHANGES" >> $GITHUB_OUTPUT
          
          echo "**Infrastructure Changes**: $HAS_TF_CHANGES" >> $GITHUB_STEP_SUMMARY
          echo "**Content Changes**: $HAS_CONTENT_CHANGES" >> $GITHUB_STEP_SUMMARY

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: deploy-info
    if: needs.deploy-info.outputs.deploy_infrastructure == 'true' && (needs.deploy-info.outputs.has_tf_changes == '1' || github.event.inputs.deploy_infrastructure == 'true')
    environment: ${{ needs.deploy-info.outputs.target_environment }}
    outputs:
      deployment_outputs: ${{ steps.deploy.outputs.deployment_outputs }}
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
      s3_bucket_id: ${{ steps.deploy.outputs.s3_bucket_id }}
      cloudfront_distribution_id: ${{ steps.deploy.outputs.cloudfront_distribution_id }}
      cloudfront_domain_name: ${{ steps.deploy.outputs.cloudfront_domain_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Cache Infrastructure Dependencies
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cache/terraform
            terraform/.terraform
            terraform/.terraform.lock.hcl
          key: deploy-infra-${{ runner.os }}-${{ needs.deploy-info.outputs.target_environment }}-${{ hashFiles('terraform/*.tf', 'terraform/.terraform.lock.hcl') }}
          restore-keys: |
            deploy-infra-${{ runner.os }}-${{ needs.deploy-info.outputs.target_environment }}-
            deploy-infra-${{ runner.os }}-

      - name: Validate Environment
        uses: ./.github/actions/validate-environment
        with:
          environment: ${{ needs.deploy-info.outputs.target_environment }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          aws-role: ${{ secrets.AWS_ASSUME_ROLE }}

      - name: Setup Infrastructure
        uses: ./.github/actions/setup-infrastructure
        with:
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          aws-role: ${{ secrets.AWS_ASSUME_ROLE }}

      - name: Deploy Infrastructure
        id: deploy
        working-directory: terraform
        env:
          TF_VAR_environment: ${{ needs.deploy-info.outputs.target_environment }}
          TF_VAR_project_name: "${{ github.repository_owner }}-static-site"
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION || 'us-east-1' }}
          # Environment-specific variables
          TF_VAR_enable_cross_region_replication: ${{ needs.deploy-info.outputs.target_environment == 'prod' && 'true' || 'false' }}
          TF_VAR_cloudfront_price_class: ${{ needs.deploy-info.outputs.target_environment == 'prod' && 'PriceClass_All' || needs.deploy-info.outputs.target_environment == 'staging' && 'PriceClass_200' || 'PriceClass_100' }}
          TF_VAR_waf_rate_limit: ${{ needs.deploy-info.outputs.target_environment == 'prod' && '5000' || needs.deploy-info.outputs.target_environment == 'staging' && '2000' || '1000' }}
          TF_VAR_enable_detailed_monitoring: ${{ needs.deploy-info.outputs.target_environment == 'dev' && 'false' || 'true' }}
          TF_VAR_alert_email_addresses: ${{ secrets.ALERT_EMAIL_ADDRESSES || '["admin@example.com"]' }}
          TF_VAR_monthly_budget_limit: ${{ vars.MONTHLY_BUDGET_LIMIT || '50' }}
        run: |
          echo "## 🏗️ Infrastructure Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: ${{ needs.deploy-info.outputs.deploy_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.deploy-info.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Initialize OpenTofu with backend
          echo "### 🔧 Initializing OpenTofu" >> $GITHUB_STEP_SUMMARY
          tofu init
          
          # Create deployment plan
          echo "### 📋 Creating Deployment Plan" >> $GITHUB_STEP_SUMMARY
          tofu plan -out=deployment.tfplan
          
          # Apply the deployment with enhanced error handling
          echo "### 🚀 Applying Deployment" >> $GITHUB_STEP_SUMMARY
          set -e  # Exit on any error
          
          # Set up cleanup trap
          cleanup() {
            echo "🧹 Performing cleanup..." >> $GITHUB_STEP_SUMMARY
            if [ -f "deployment.tfplan" ]; then
              rm -f deployment.tfplan
            fi
            # Log current state for debugging
            tofu show -json > failure-state.json 2>/dev/null || true
          }
          trap cleanup EXIT
          
          if timeout 18m tofu apply -auto-approve deployment.tfplan; then
            echo "✅ Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            
            # Capture outputs with error handling
            if tofu output -json > deployment-outputs.json 2>/dev/null; then
              OUTPUTS=$(cat deployment-outputs.json | jq -c . 2>/dev/null || echo '{}')
              echo "deployment_outputs=$OUTPUTS" >> $GITHUB_OUTPUT
              
              # Extract key outputs for website deployment
              S3_BUCKET=$(jq -r '.s3_bucket_id.value // empty' deployment-outputs.json)
              CF_DISTRIBUTION=$(jq -r '.cloudfront_distribution_id.value // empty' deployment-outputs.json)
              CF_DOMAIN=$(jq -r '.cloudfront_domain_name.value // empty' deployment-outputs.json)
              
              echo "s3_bucket_id=$S3_BUCKET" >> $GITHUB_OUTPUT
              echo "cloudfront_distribution_id=$CF_DISTRIBUTION" >> $GITHUB_OUTPUT
              echo "cloudfront_domain_name=$CF_DOMAIN" >> $GITHUB_OUTPUT
              
              echo "### 📊 Deployment Outputs" >> $GITHUB_STEP_SUMMARY
              echo "- **S3 Bucket**: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
              echo "- **CloudFront Distribution**: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
              echo "- **CloudFront Domain**: $CF_DOMAIN" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Could not capture deployment outputs" >> $GITHUB_STEP_SUMMARY
              echo "deployment_outputs={}" >> $GITHUB_OUTPUT
            fi
          else
            APPLY_EXIT_CODE=$?
            echo "❌ Infrastructure deployment failed (exit code: $APPLY_EXIT_CODE)" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            
            # Capture failure state for debugging
            echo "### 🔍 Failure Analysis" >> $GITHUB_STEP_SUMMARY
            tofu show 2>/dev/null | tail -50 >> $GITHUB_STEP_SUMMARY || echo "Could not show current state"
            
            exit 1
          fi

      - name: Upload Deployment Outputs
        if: steps.deploy.outputs.deployment_status == 'success'
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ${{ needs.deploy-info.outputs.deploy_id }}-infrastructure-outputs
          path: terraform/deployment-outputs.json
          retention-days: 30

      - name: Post-Deployment Validation
        if: steps.deploy.outputs.deployment_status == 'success'
        run: |
          echo "### 🔍 Post-Deployment Validation" >> $GITHUB_STEP_SUMMARY
          
          S3_BUCKET="${{ steps.deploy.outputs.s3_bucket_id }}"
          CF_DISTRIBUTION="${{ steps.deploy.outputs.cloudfront_distribution_id }}"
          
          validation_errors=0
          
          # Validate S3 bucket
          if [ -n "$S3_BUCKET" ]; then
            if aws s3 ls "s3://$S3_BUCKET" >/dev/null 2>&1; then
              echo "✅ S3 bucket accessible: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ S3 bucket not accessible: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
              validation_errors=$((validation_errors + 1))
            fi
          fi
          
          # Validate CloudFront distribution
          if [ -n "$CF_DISTRIBUTION" ]; then
            if aws cloudfront get-distribution --id "$CF_DISTRIBUTION" >/dev/null 2>&1; then
              echo "✅ CloudFront distribution accessible: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ CloudFront distribution not accessible: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
              validation_errors=$((validation_errors + 1))
            fi
          fi
          
          if [ $validation_errors -eq 0 ]; then
            echo "✅ Post-deployment validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Post-deployment validation failed with $validation_errors errors" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  deploy-website:
    name: Deploy Website Content
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-info, deploy-infrastructure]
    if: needs.deploy-info.outputs.deploy_website == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') && (needs.deploy-info.outputs.has_content_changes == '1' || github.event.inputs.deploy_website == 'true')
    environment: ${{ needs.deploy-info.outputs.target_environment }}
    outputs:
      website_url: ${{ steps.deploy-content.outputs.website_url }}
      deployment_status: ${{ steps.deploy-content.outputs.deployment_status }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Cache Website Dependencies
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cache/terraform
            terraform/.terraform
          key: deploy-website-${{ runner.os }}-${{ needs.deploy-info.outputs.target_environment }}-${{ hashFiles('src/**/*') }}
          restore-keys: |
            deploy-website-${{ runner.os }}-${{ needs.deploy-info.outputs.target_environment }}-
            deploy-website-${{ runner.os }}-

      - name: Setup Infrastructure
        uses: ./.github/actions/setup-infrastructure
        with:
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          aws-role: ${{ secrets.AWS_ASSUME_ROLE }}

      - name: Download Website Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: website-*
          merge-multiple: true
        continue-on-error: true

      - name: Deploy Website Content
        id: deploy-content
        env:
          S3_BUCKET: ${{ needs.deploy-infrastructure.outputs.s3_bucket_id }}
          CF_DISTRIBUTION: ${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }}
          CF_DOMAIN: ${{ needs.deploy-infrastructure.outputs.cloudfront_domain_name }}
        run: |
          echo "## 🌐 Website Content Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: ${{ needs.deploy-info.outputs.deploy_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.deploy-info.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Use built website if available, otherwise use source
          if [ -d "build" ]; then
            CONTENT_DIR="build"
            echo "✅ Using built website content from BUILD workflow" >> $GITHUB_STEP_SUMMARY
          else
            CONTENT_DIR="src"
            echo "⚠️ Using source content directly (no BUILD artifacts found)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Get S3 bucket from infrastructure deployment or discover it
          if [ -z "$S3_BUCKET" ]; then
            echo "🔍 Discovering S3 bucket from Terraform state..." >> $GITHUB_STEP_SUMMARY
            cd terraform
            S3_BUCKET=$(tofu output -raw s3_bucket_id 2>/dev/null || echo "")
            CF_DISTRIBUTION=$(tofu output -raw cloudfront_distribution_id 2>/dev/null || echo "")
            CF_DOMAIN=$(tofu output -raw cloudfront_domain_name 2>/dev/null || echo "")
            cd ..
          fi
          
          if [ -z "$S3_BUCKET" ]; then
            echo "❌ Could not determine S3 bucket for deployment" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "### 📋 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Distribution**: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Domain**: $CF_DOMAIN" >> $GITHUB_STEP_SUMMARY
          echo "- **Content Directory**: $CONTENT_DIR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Sync content to S3
          echo "### 🚀 Syncing Content to S3" >> $GITHUB_STEP_SUMMARY
          if aws s3 sync "$CONTENT_DIR/" "s3://$S3_BUCKET" --delete --exact-timestamps; then
            echo "✅ Content synced successfully to S3" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to sync content to S3" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Invalidate CloudFront cache
          if [ -n "$CF_DISTRIBUTION" ]; then
            echo "### 🔄 Invalidating CloudFront Cache" >> $GITHUB_STEP_SUMMARY
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id "$CF_DISTRIBUTION" \
              --paths "/*" \
              --query 'Invalidation.Id' \
              --output text)
            
            if [ $? -eq 0 ]; then
              echo "✅ CloudFront cache invalidation created: $INVALIDATION_ID" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Failed to create CloudFront cache invalidation" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ No CloudFront distribution found - skipping cache invalidation" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Set outputs
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          if [ -n "$CF_DOMAIN" ]; then
            echo "website_url=https://$CF_DOMAIN" >> $GITHUB_OUTPUT
            echo "### 🌐 Website URL" >> $GITHUB_STEP_SUMMARY
            echo "**Website is now live at**: https://$CF_DOMAIN" >> $GITHUB_STEP_SUMMARY
          else
            echo "website_url=https://$S3_BUCKET.s3.amazonaws.com" >> $GITHUB_STEP_SUMMARY
            echo "### 🌐 Website URL" >> $GITHUB_STEP_SUMMARY
            echo "**Website is available at**: https://$S3_BUCKET.s3.amazonaws.com" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Verify Website Deployment
        run: |
          echo "### 🔍 Website Verification" >> $GITHUB_STEP_SUMMARY
          
          WEBSITE_URL="${{ steps.deploy-content.outputs.website_url }}"
          
          if [ -n "$WEBSITE_URL" ]; then
            echo "Testing website accessibility: $WEBSITE_URL"
            
            # Wait a moment for propagation
            sleep 30
            
            # Test website accessibility (basic check)
            if curl -s -f -I "$WEBSITE_URL" >/dev/null; then
              echo "✅ Website is accessible at $WEBSITE_URL" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Website may not be immediately accessible (propagation delay expected)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-info, deploy-infrastructure, deploy-website]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 DEPLOY Phase Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: ${{ needs.deploy-info.outputs.deploy_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.deploy-info.outputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure Deployment**: ${{ needs.deploy-infrastructure.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Website Deployment**: ${{ needs.deploy-website.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show website URL if available
          WEBSITE_URL="${{ needs.deploy-website.outputs.website_url }}"
          if [ -n "$WEBSITE_URL" ]; then
            echo "### 🌐 Deployed Website" >> $GITHUB_STEP_SUMMARY
            echo "**Live URL**: $WEBSITE_URL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Final status assessment
          INFRA_STATUS="${{ needs.deploy-infrastructure.result }}"
          WEBSITE_STATUS="${{ needs.deploy-website.result }}"
          
          if ([ "$INFRA_STATUS" = "success" ] || [ "$INFRA_STATUS" = "skipped" ]) && \
             ([ "$WEBSITE_STATUS" = "success" ] || [ "$WEBSITE_STATUS" = "skipped" ]); then
            echo "✅ **DEPLOY Phase Successful**" >> $GITHUB_STEP_SUMMARY
            echo "Static website infrastructure and content deployed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **DEPLOY Phase Failed**" >> $GITHUB_STEP_SUMMARY
            echo "Please review the deployment logs and fix issues." >> $GITHUB_STEP_SUMMARY
          fi