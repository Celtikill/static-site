name: "Bootstrap Distributed Backend (Phase 2)"

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project name for resource isolation (e.g., static-site, ecommerce)'
        required: true
        type: string
        default: static-site
      environment:
        description: 'Environment to bootstrap backend for (creates in target account)'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev
      confirm_bootstrap:
        description: 'Type "BOOTSTRAP-DISTRIBUTED" to confirm backend creation in target account'
        required: true
        type: string

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}

permissions:
  id-token: write
  contents: read
  pull-requests: write
  deployments: write
  actions: read

jobs:
  validate:
    name: "🔍 Validate Bootstrap Request"
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.validate.outputs.proceed }}
    steps:
      - name: Validate Confirmation
        id: validate
        run: |
          if [ "${{ inputs.confirm_bootstrap }}" != "BOOTSTRAP-DISTRIBUTED" ]; then
            echo "❌ Bootstrap cancelled - confirmation text did not match"
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "✅ Bootstrap confirmation validated"
          echo "proceed=true" >> $GITHUB_OUTPUT

  setup:
    name: "⚙️ Setup Environment Configuration"
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.proceed == 'true'
    outputs:
      target_account_id: ${{ steps.config.outputs.target_account_id }}
      target_role_arn: ${{ steps.config.outputs.target_role_arn }}
      backend_bucket: ${{ steps.config.outputs.backend_bucket }}
      backend_table: ${{ steps.config.outputs.backend_table }}
    steps:
      - name: Set Environment Configuration
        id: config
        run: |
          # Convert project name for resources (lowercase, hyphens) but preserve existing role names
          PROJECT_NAME=$(echo "${{ inputs.project_name }}" | tr '[:upper:]' '[:lower:]' | tr '_' '-')

          # Map project names to existing role naming conventions
          case "${PROJECT_NAME}" in
            static-site)
              ROLE_PROJECT_NAME="StaticSite"
              ;;
            *)
              # For new projects, use PascalCase conversion
              ROLE_PROJECT_NAME=$(echo "${{ inputs.project_name }}" | tr '[:lower:]' '[:upper:]' | sed 's/-\([a-z]\)/\U\1/g' | sed 's/^./\U&/')
              ;;
          esac

          case "${{ inputs.environment }}" in
            dev)
              TARGET_ACCOUNT_ID="822529998967"
              echo "target_account_id=${TARGET_ACCOUNT_ID}" >> $GITHUB_OUTPUT
              echo "target_role_arn=arn:aws:iam::${TARGET_ACCOUNT_ID}:role/GitHubActions-${ROLE_PROJECT_NAME}-Dev-Role" >> $GITHUB_OUTPUT
              echo "backend_bucket=${PROJECT_NAME}-state-dev-${TARGET_ACCOUNT_ID}" >> $GITHUB_OUTPUT
              echo "backend_table=${PROJECT_NAME}-locks-dev" >> $GITHUB_OUTPUT
              ;;
            staging)
              TARGET_ACCOUNT_ID="927588814642"
              echo "target_account_id=${TARGET_ACCOUNT_ID}" >> $GITHUB_OUTPUT
              echo "target_role_arn=arn:aws:iam::${TARGET_ACCOUNT_ID}:role/GitHubActions-${ROLE_PROJECT_NAME}-Staging-Role" >> $GITHUB_OUTPUT
              echo "backend_bucket=${PROJECT_NAME}-state-staging-${TARGET_ACCOUNT_ID}" >> $GITHUB_OUTPUT
              echo "backend_table=${PROJECT_NAME}-locks-staging" >> $GITHUB_OUTPUT
              ;;
            prod)
              TARGET_ACCOUNT_ID="546274483801"
              echo "target_account_id=${TARGET_ACCOUNT_ID}" >> $GITHUB_OUTPUT
              echo "target_role_arn=arn:aws:iam::${TARGET_ACCOUNT_ID}:role/GitHubActions-${ROLE_PROJECT_NAME}-Prod-Role" >> $GITHUB_OUTPUT
              echo "backend_bucket=${PROJECT_NAME}-state-prod-${TARGET_ACCOUNT_ID}" >> $GITHUB_OUTPUT
              echo "backend_table=${PROJECT_NAME}-locks-prod" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "❌ Invalid environment: ${{ inputs.environment }}"
              exit 1
              ;;
          esac

          echo "🔧 **Bootstrap Configuration**" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${PROJECT_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Role Project**: ${ROLE_PROJECT_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Account**: ${TARGET_ACCOUNT_ID}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Role**: GitHubActions-${ROLE_PROJECT_NAME}-${{ inputs.environment }}-Role" >> $GITHUB_STEP_SUMMARY

  bootstrap:
    name: "🚀 Bootstrap Distributed Backend"
    runs-on: ubuntu-latest
    needs: [validate, setup]
    if: needs.validate.outputs.proceed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.OPENTOFU_VERSION }}

      - name: Configure AWS Credentials (Central Role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CENTRAL }}
          role-session-name: github-actions-bootstrap-central-${{ github.run_id }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          audience: sts.amazonaws.com

      - name: Assume Target Environment Role
        run: |
          TARGET_ROLE="${{ needs.setup.outputs.target_role_arn }}"
          EXTERNAL_ID="github-actions-static-site"
          SESSION_NAME="bootstrap-${{ inputs.environment }}-${{ github.run_id }}"

          echo "🔄 Assuming target account role: $TARGET_ROLE"

          CREDS=$(aws sts assume-role \
            --role-arn "$TARGET_ROLE" \
            --role-session-name "$SESSION_NAME" \
            --external-id "$EXTERNAL_ID" \
            --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
            --output text)

          if [ $? -ne 0 ]; then
            echo "❌ Failed to assume role: $TARGET_ROLE"
            exit 1
          fi

          AWS_ACCESS_KEY_ID=$(echo $CREDS | cut -d' ' -f1)
          AWS_SECRET_ACCESS_KEY=$(echo $CREDS | cut -d' ' -f2)
          AWS_SESSION_TOKEN=$(echo $CREDS | cut -d' ' -f3)

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $GITHUB_ENV

          echo "✅ Successfully assumed target account role"

      - name: Initialize Bootstrap Module
        working-directory: terraform/bootstrap
        run: |
          echo "## 🚀 Bootstrapping Distributed Backend" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Bootstrap configuration for target account (AWS best practice)
          BACKEND_BUCKET="${{ needs.setup.outputs.backend_bucket }}"
          BACKEND_TABLE="${{ needs.setup.outputs.backend_table }}"
          TARGET_ACCOUNT="${{ needs.setup.outputs.target_account_id }}"

          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Account**: $TARGET_ACCOUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Bucket**: \`$BACKEND_BUCKET\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Table**: \`$BACKEND_TABLE\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_DEFAULT_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Initialize with local backend (chicken-and-egg solution)
          echo "🔧 Initializing bootstrap module with local backend..."
          tofu init

      - name: Plan Bootstrap Infrastructure
        working-directory: terraform/bootstrap
        run: |
          echo "📋 Planning bootstrap infrastructure..."
          tofu plan -var-file="${{ inputs.environment }}.tfvars" -out=bootstrap.tfplan

      - name: Apply Bootstrap Infrastructure
        working-directory: terraform/bootstrap
        run: |
          echo "🚀 Creating bootstrap infrastructure in target account..."
          tofu apply -auto-approve bootstrap.tfplan

          echo "### 🎉 Bootstrap Infrastructure Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get outputs for backend configuration
          BUCKET_NAME=$(tofu output -raw backend_bucket)
          TABLE_NAME=$(tofu output -raw backend_dynamodb_table)
          REGION=$(tofu output -raw backend_region)

          echo "### Backend Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```hcl' >> $GITHUB_STEP_SUMMARY
          echo "bucket         = \"$BUCKET_NAME\"" >> $GITHUB_STEP_SUMMARY
          echo "key            = \"environments/${{ inputs.environment }}/terraform.tfstate\"" >> $GITHUB_STEP_SUMMARY
          echo "region         = \"$REGION\"" >> $GITHUB_STEP_SUMMARY
          echo "dynamodb_table = \"$TABLE_NAME\"" >> $GITHUB_STEP_SUMMARY
          echo "encrypt        = true" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Migrate Bootstrap State to S3
        working-directory: terraform/bootstrap
        run: |
          echo "🔄 Migrating bootstrap state to newly created S3 backend..."

          # Configure backend for this bootstrap module
          cat > backend_config.hcl <<EOF
          bucket         = "$(tofu output -raw backend_bucket)"
          key            = "bootstrap/terraform.tfstate"
          region         = "$(tofu output -raw backend_region)"
          dynamodb_table = "$(tofu output -raw backend_dynamodb_table)"
          encrypt        = true
          EOF

          # Add backend configuration to main.tf
          cat >> main.tf <<'EOF'

          # Migrate bootstrap state to S3 after creation (uncomment after initial apply)
          # terraform {
          #   backend "s3" {}
          # }
          EOF

          echo "### 🔄 State Migration" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Bootstrap infrastructure created with local state" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Manual migration needed: Uncomment backend block and run init -migrate-state" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Backend config saved to \`backend_config.hcl\`" >> $GITHUB_STEP_SUMMARY

      - name: Verify Backend Access
        run: |
          BACKEND_BUCKET="${{ needs.setup.outputs.backend_bucket }}"
          BACKEND_TABLE="${{ needs.setup.outputs.backend_table }}"

          echo "### 🔍 Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test S3 access
          TEST_KEY="bootstrap-test-${{ github.run_id }}.txt"
          echo "Testing distributed backend access at $(date)" > /tmp/test.txt

          if aws s3 cp /tmp/test.txt "s3://$BACKEND_BUCKET/$TEST_KEY"; then
            echo "✅ Successfully wrote test file to S3"
            echo "- ✅ S3 write access confirmed in target account" >> $GITHUB_STEP_SUMMARY

            # Clean up test file
            aws s3 rm "s3://$BACKEND_BUCKET/$TEST_KEY"
          else
            echo "❌ Failed to write to S3 bucket"
            echo "- ❌ S3 write access failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Test DynamoDB access
          if aws dynamodb put-item \
            --table-name "$BACKEND_TABLE" \
            --item '{"LockID": {"S": "bootstrap-test"}}' \
            --condition-expression "attribute_not_exists(LockID)" \
            --region ${{ env.AWS_DEFAULT_REGION }}; then
            echo "✅ Successfully wrote test item to DynamoDB"
            echo "- ✅ DynamoDB write access confirmed in target account" >> $GITHUB_STEP_SUMMARY

            # Clean up test item
            aws dynamodb delete-item \
              --table-name "$BACKEND_TABLE" \
              --key '{"LockID": {"S": "bootstrap-test"}}' \
              --region ${{ env.AWS_DEFAULT_REGION }}
          else
            echo "⚠️ DynamoDB test write skipped (item may already exist)"
            echo "- ⚠️ DynamoDB test skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎉 Distributed Backend Ready!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update RUN workflow to use \`-backend-config=../backend-configs/${{ inputs.environment }}.hcl\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Migrate main infrastructure state from centralized to distributed backend" >> $GITHUB_STEP_SUMMARY
          echo "3. Decommission centralized backend after migration complete" >> $GITHUB_STEP_SUMMARY