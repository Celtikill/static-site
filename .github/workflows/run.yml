name: RUN - Deployment Operations

on:
  workflow_run:
    workflows: ["TEST - Quality Gates and Validation"]
    types: [completed]
    branches: [main, 'feature/*', 'bugfix/*', 'hotfix/*']
  workflow_dispatch:
    inputs:
      test_id:
        description: 'Test ID from TEST workflow (optional)'
        required: false
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options: [dev, staging, prod]
        default: dev
      skip_test_check:
        description: 'Skip TEST workflow dependency check'
        required: false
        type: boolean
        default: false
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        type: boolean
        default: true
      deploy_website:
        description: 'Deploy website content'
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read
  pull-requests: write
  deployments: write

env:
  AWS_DEFAULT_REGION: us-east-1
  TF_IN_AUTOMATION: true

concurrency:
  group: run-${{ inputs.environment || 'auto' }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  info:
    name: "📋 Deployment Information"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # Only run if TEST succeeded or if manual dispatch with skip
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event.workflow_run.conclusion == 'success'
    outputs:
      run_id: ${{ steps.info.outputs.run_id }}
      target_environment: ${{ steps.info.outputs.target_environment }}
      deploy_infrastructure: ${{ steps.info.outputs.deploy_infrastructure }}
      deploy_website: ${{ steps.info.outputs.deploy_website }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Info  
        id: info
        run: |
          RUN_ID="run-${{ github.run_id }}-${{ github.run_attempt }}"
          
          # Determine target environment
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            TARGET_ENV="${{ github.event.inputs.environment }}"
            ENV_SOURCE="Manual Input"
          elif [[ "${{ github.event.workflow_run.head_branch || github.ref_name }}" =~ ^(feature|bugfix|hotfix)/ ]]; then
            TARGET_ENV="dev"
            ENV_SOURCE="Feature Branch Auto-Deploy"
          else
            TARGET_ENV="dev"
            ENV_SOURCE="Default"
          fi
          
          # Determine deployment flags
          DEPLOY_INFRA="${{ github.event.inputs.deploy_infrastructure || 'true' }}"
          DEPLOY_WEBSITE="${{ github.event.inputs.deploy_website || 'true' }}"
          
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "deploy_infrastructure=$DEPLOY_INFRA" >> $GITHUB_OUTPUT
          echo "deploy_website=$DEPLOY_WEBSITE" >> $GITHUB_OUTPUT
          
          echo "# 🚀 RUN Phase" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: $RUN_ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $TARGET_ENV ($ENV_SOURCE)" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.event.workflow_run.head_branch || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Infrastructure**: $DEPLOY_INFRA" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Website**: $DEPLOY_WEBSITE" >> $GITHUB_STEP_SUMMARY

  authorization:
    name: "🔐 Production Authorization"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: info
    if: needs.info.outputs.target_environment == 'prod'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Production Authorization
        run: |
          echo "🔐 **Production Deployment Authorization**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if triggered by manual dispatch (requires authorization)
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "❌ Production deployments require manual authorization" >> $GITHUB_STEP_SUMMARY
            echo "Use: gh workflow run run.yml --field environment=prod" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check CODEOWNERS authorization
          ACTOR="${{ github.actor }}"
          if [ -f ".github/CODEOWNERS" ]; then
            CODE_OWNERS=$(grep -E '^(\*|/\.github/workflows/)' .github/CODEOWNERS | grep -oE '@[a-zA-Z0-9_-]+' | sort -u || echo "")
            
            if echo "$CODE_OWNERS" | grep -q "@$ACTOR"; then
              echo "✅ **AUTHORIZED**: $ACTOR is a code owner" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **UNAUTHORIZED**: $ACTOR is not a code owner" >> $GITHUB_STEP_SUMMARY
              echo "Code owners: $CODE_OWNERS" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "⚠️ No CODEOWNERS file found - proceeding" >> $GITHUB_STEP_SUMMARY
          fi

  setup:
    name: "🔧 Setup Deployment Tools"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [info, authorization]
    if: always() && !failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-session-name: github-actions-run-${{ needs.info.outputs.run_id }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup Tools
        run: |
          echo "## 🔧 Setting up deployment tools" >> $GITHUB_STEP_SUMMARY
          
          # Install OpenTofu
          curl -L -o /tmp/tofu.zip https://github.com/opentofu/opentofu/releases/download/v1.6.1/tofu_1.6.1_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/
          
          # Install AWS CLI (if not already available)
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
          fi
          
          echo "✅ Deployment tools ready" >> $GITHUB_STEP_SUMMARY

  infrastructure:
    name: "🏗️ Infrastructure Deployment"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [info, setup]
    if: needs.info.outputs.deploy_infrastructure == 'true'
    environment: ${{ needs.info.outputs.target_environment }}
    outputs:
      outputs: ${{ steps.deploy.outputs.outputs }}
      bucket_name: ${{ steps.deploy.outputs.bucket_name }}
      distribution_id: ${{ steps.deploy.outputs.distribution_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-session-name: github-actions-infra-${{ needs.info.outputs.run_id }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup OpenTofu
        run: |
          curl -L -o /tmp/tofu.zip https://github.com/opentofu/opentofu/releases/download/v1.6.1/tofu_1.6.1_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/

      - name: Deploy Infrastructure
        id: deploy
        working-directory: terraform
        run: |
          echo "## 🏗️ Infrastructure Deployment" >> $GITHUB_STEP_SUMMARY
          
          # Initialize with backend
          if tofu init -reconfigure; then
            echo "✅ Terraform initialized" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform initialization failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Plan deployment
          if tofu plan -var="environment=${{ needs.info.outputs.target_environment }}" -out=deploy.tfplan; then
            echo "✅ Terraform plan created" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Terraform plan failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Show what will be deployed
          PLAN_SUMMARY=$(tofu show -json deploy.tfplan | jq -r '.resource_changes[] | select(.change.actions[] | . != "no-op") | "\(.change.actions | join(",")) \(.type).\(.name)"' | head -10)
          if [ -n "$PLAN_SUMMARY" ]; then
            echo "**Changes to be applied:**" >> $GITHUB_STEP_SUMMARY
            echo "$PLAN_SUMMARY" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "No infrastructure changes to apply" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Apply changes
          if tofu apply -auto-approve deploy.tfplan; then
            echo "✅ Infrastructure deployment successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Infrastructure deployment failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Output important values
          OUTPUTS=$(tofu output -json 2>/dev/null || echo '{}')
          BUCKET_NAME=$(echo "$OUTPUTS" | jq -r '.s3_bucket_name.value // ""')
          DISTRIBUTION_ID=$(echo "$OUTPUTS" | jq -r '.cloudfront_distribution_id.value // ""')
          CLOUDFRONT_URL=$(echo "$OUTPUTS" | jq -r '.cloudfront_domain_name.value // "N/A"')
          
          echo "outputs=$OUTPUTS" >> $GITHUB_OUTPUT
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          
          # Display key outputs
          echo "**Deployment Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- S3 Bucket: $BUCKET_NAME" >> $GITHUB_STEP_SUMMARY  
          echo "- CloudFront URL: $CLOUDFRONT_URL" >> $GITHUB_STEP_SUMMARY

  website:
    name: "🌐 Website Deployment"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [info, setup, infrastructure]
    if: always() && !failure() && needs.info.outputs.deploy_website == 'true'
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-session-name: github-actions-website-${{ needs.info.outputs.run_id }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Deploy Website
        id: deploy
        run: |
          echo "## 🌐 Website Content Deployment" >> $GITHUB_STEP_SUMMARY
          
          # Get S3 bucket name from infrastructure job
          BUCKET_NAME="${{ needs.infrastructure.outputs.bucket_name }}"
          
          if [ -z "$BUCKET_NAME" ]; then
            # Fallback to conventional naming
            BUCKET_NAME="static-site-${{ needs.info.outputs.target_environment }}-$(date +%s | tail -c 6)"
            echo "⚠️ Using fallback bucket name: $BUCKET_NAME" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Sync website content to S3
          if aws s3 sync src/ s3://$BUCKET_NAME/ --delete --quiet; then
            echo "✅ Website content uploaded to S3" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Website upload failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Get CloudFront distribution ID and invalidate cache
          DISTRIBUTION_ID="${{ needs.infrastructure.outputs.distribution_id }}"
          
          if [ -n "$DISTRIBUTION_ID" ]; then
            if aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths "/*" --query 'Invalidation.Id' --output text; then
              echo "✅ CloudFront cache invalidated" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Cache invalidation failed (non-blocking)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ No CloudFront distribution found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Determine deployment URL from infrastructure outputs
          OUTPUTS='${{ needs.infrastructure.outputs.outputs }}'
          DEPLOYMENT_URL=$(echo "$OUTPUTS" | jq -r '.cloudfront_domain_name.value // ""')
          
          if [ -n "$DEPLOYMENT_URL" ] && [[ "$DEPLOYMENT_URL" != "null" ]]; then
            DEPLOYMENT_URL="https://$DEPLOYMENT_URL"
          else
            DEPLOYMENT_URL="https://$BUCKET_NAME.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com"
          fi
          
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "**Website URL**: $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY

  validation:
    name: "🔍 Post-Deployment Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [info, infrastructure, website]
    if: always() && !failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Post-Deployment Validation
        continue-on-error: true
        run: |
          echo "## 🔍 Post-Deployment Validation" >> $GITHUB_STEP_SUMMARY
          
          DEPLOYMENT_URL="${{ needs.website.outputs.deployment_url }}"
          
          if [ -n "$DEPLOYMENT_URL" ]; then
            # Wait a moment for deployment to propagate
            sleep 10
            
            # Test website accessibility
            if curl -s -f -L "$DEPLOYMENT_URL" > /dev/null; then
              echo "✅ Website is accessible" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Website may not be ready yet" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Test 404 page
            if curl -s -f -L "$DEPLOYMENT_URL/nonexistent-page" > /dev/null; then
              echo "⚠️ 404 handling may need verification" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ 404 handling appears correct" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ No deployment URL available for testing" >> $GITHUB_STEP_SUMMARY
          fi

  github-deployment:
    name: "📝 Update GitHub Deployment"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [info, infrastructure, website, validation]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update GitHub Deployment
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const environment = '${{ needs.info.outputs.target_environment }}';
            const deploymentUrl = '${{ needs.website.outputs.deployment_url }}';
            const success = '${{ job.status }}' === 'success';
            
            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: success ? 'success' : 'failure',
              description: `Deployment to ${environment} ${success ? 'successful' : 'failed'}`,
              environment_url: deploymentUrl,
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

  summary:
    name: "📊 Deployment Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [info, infrastructure, website, validation, github-deployment]
    if: always()
    outputs:
      deployment_status: ${{ steps.summary.outputs.status }}
      deployment_url: ${{ needs.website.outputs.deployment_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deployment Summary
        id: summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Authorization | ${{ needs.authorization.result == 'success' && '✅ Authorized' || needs.authorization.result == 'skipped' && '➖ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infrastructure.result == 'success' && '✅ Deployed' || needs.infrastructure.result == 'skipped' && '➖ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Website Content | ${{ needs.website.result == 'success' && '✅ Deployed' || needs.website.result == 'skipped' && '➖ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validation.result == 'success' && '✅ Completed' || needs.validation.result == 'skipped' && '➖ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Deployment | ${{ needs.github-deployment.result == 'success' && '✅ Updated' || needs.github-deployment.result == 'skipped' && '➖ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check overall status
          FAILED_JOBS=""
          if [ "${{ needs.authorization.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Authorization "; fi
          if [ "${{ needs.infrastructure.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Infrastructure "; fi
          if [ "${{ needs.website.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Website "; fi
          if [ "${{ needs.validation.result }}" = "failure" ]; then FAILED_JOBS="${FAILED_JOBS}Validation "; fi
          
          if [ -z "$FAILED_JOBS" ]; then
            echo "🎉 **DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
            if [ -n "${{ needs.website.outputs.deployment_url }}" ]; then
              echo "🌐 **Website**: ${{ needs.website.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **DEPLOYMENT FAILED** - Failed jobs: $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi