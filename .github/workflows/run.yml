name: RUN - Deployment Operations (Streamlined)

on:
  workflow_run:
    workflows: ["TEST - Quality Gates and Validation"]
    types: [completed]
    branches: [main, 'feature/*', 'bugfix/*', 'hotfix/*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options: [dev, staging, prod]
        default: dev
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        type: boolean
        default: true
      deploy_website:
        description: 'Deploy website content'
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read
  pull-requests: write
  deployments: write
  actions: read

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}
  TF_IN_AUTOMATION: true

concurrency:
  group: run-${{ inputs.environment || 'auto' }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  info:
    name: "📋 Deployment Information"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      target_environment: ${{ steps.info.outputs.target_environment }}
      commit_sha: ${{ steps.info.outputs.commit_sha }}
      deploy_infrastructure: ${{ steps.info.outputs.deploy_infrastructure }}
      deploy_website: ${{ steps.info.outputs.deploy_website }}
      run_id: ${{ steps.info.outputs.run_id }}
    steps:
      - name: Determine Deployment Info
        id: info
        run: |
          RUN_ID="run-$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TARGET_ENV="${{ inputs.environment }}"
            COMMIT_SHA="${{ github.sha }}"
            DEPLOY_INFRA="${{ inputs.deploy_infrastructure }}"
            DEPLOY_WEBSITE="${{ inputs.deploy_website }}"
            TRIGGER_SOURCE="manual dispatch"
          else
            # Triggered by TEST workflow completion
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]
            then
              echo "❌ TEST workflow failed - aborting deployment"
              exit 1
            fi

            # Environment routing based on branch
            # Note: main branch no longer auto-deploys to staging
            # Staging deployments now happen via PR previews only
            BRANCH="${{ github.event.workflow_run.head_branch }}"
            case "$BRANCH" in
              main)
                # Skip main branch auto-deploy - staging via PR only
                echo "⚠️ Main branch auto-deploy to staging disabled"
                echo "Use PR-based staging deployments instead"
                exit 0
                ;;
              *) TARGET_ENV="dev" ;;
            esac

            COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
            DEPLOY_INFRA="true"
            DEPLOY_WEBSITE="true"
            TRIGGER_SOURCE="automatic via TEST workflow"
          fi

          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "deploy_infrastructure=$DEPLOY_INFRA" >> $GITHUB_OUTPUT
          echo "deploy_website=$DEPLOY_WEBSITE" >> $GITHUB_OUTPUT
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

          echo "# 🚀 RUN Phase - Streamlined" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: $RUN_ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $TARGET_ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: $TRIGGER_SOURCE" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Infrastructure**: $DEPLOY_INFRA" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Website**: $DEPLOY_WEBSITE" >> $GITHUB_STEP_SUMMARY

  authorization:
    name: "🔐 Production Authorization"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: info
    if: needs.info.outputs.target_environment == 'prod'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Production Authorization
        run: |
          echo "🔐 **Production Deployment Authorization**" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "❌ Production deployments require manual authorization"
            echo "Use: gh workflow run run-streamlined.yml"
            exit 1
          fi

          echo "✅ **AUTHORIZED**: Manual production deployment" >> \
            $GITHUB_STEP_SUMMARY

  deploy:
    name: "🚀 Deploy via Composite Workflow"
    uses: ./.github/workflows/deploy-composite.yml
    needs: [info, authorization]
    if: always() && needs.info.result == 'success' && (needs.authorization.result == 'success' || needs.authorization.result == 'skipped')
    with:
      environment: ${{ needs.info.outputs.target_environment }}
      ref: ${{ needs.info.outputs.commit_sha }}
      deploy_infrastructure: ${{ needs.info.outputs.deploy_infrastructure == 'true' }}
      deploy_website: ${{ needs.info.outputs.deploy_website == 'true' }}
      deployment_id: ${{ needs.info.outputs.run_id }}
    secrets: inherit

  summary:
    name: "📊 Deployment Summary"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [info, deploy]
    if: always()
    steps:
      - name: Final Summary
        run: |
          echo "## 📊 Final Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ needs.info.outputs.target_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Status | ${{ needs.deploy.outputs.deployment_status || 'Unknown' }} |" >> $GITHUB_STEP_SUMMARY

          DEPLOY_URL="${{ needs.deploy.outputs.deployment_url }}"
          if [ -n "$DEPLOY_URL" ]; then
            echo "| Deployment URL | [$DEPLOY_URL]($DEPLOY_URL) |" >> \
              $GITHUB_STEP_SUMMARY
          fi

          # Final status determination
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
            if [ -n "$DEPLOY_URL" ]; then
              echo "🌐 **Visit**: $DEPLOY_URL" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Check the deploy job logs for details" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
