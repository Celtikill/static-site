name: ROLLBACK - Emergency Site Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: staging
      rollback_reason:
        description: 'Reason for rollback (required)'
        required: true
        type: string
      rollback_method:
        description: 'Rollback method'
        required: true
        type: choice
        options:
          - last_known_good
          - specific_commit
          - infrastructure_only
          - content_only
        default: last_known_good
      target_commit:
        description: 'Target commit SHA (required for specific_commit method)'
        required: false
        type: string

# Enhanced permissions for rollback operations
permissions:
  id-token: write
  contents: read
  pull-requests: write
  deployments: write

concurrency:
  group: rollback-${{ github.event.inputs.environment }}
  cancel-in-progress: false

jobs:
  rollback-authorization:
    name: Rollback Authorization Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      authorized: ${{ steps.check-auth.outputs.authorized }}
      approver: ${{ steps.check-auth.outputs.approver }}
      rollback_target: ${{ steps.determine-target.outputs.rollback_target }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0  # Need full history for rollback operations
      
      - name: Check Code Owner Authorization for Rollback
        id: check-auth
        run: |
          echo "🔄 **ROLLBACK AUTHORIZATION CHECK**" >> $GITHUB_STEP_SUMMARY
          echo "===================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ACTOR="${{ github.actor }}"
          ROLLBACK_REASON='${{ github.event.inputs.rollback_reason }}'
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          ROLLBACK_METHOD="${{ github.event.inputs.rollback_method }}"
          
          echo "**Requesting User**: $ACTOR" >> $GITHUB_STEP_SUMMARY
          echo "**Rollback Reason**: $ROLLBACK_REASON" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "**Rollback Method**: $ROLLBACK_METHOD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Validate rollback reason
          if [ ${#ROLLBACK_REASON} -lt 10 ]; then
            echo "❌ **REJECTED**: Rollback reason too short (minimum 10 characters)" >> $GITHUB_STEP_SUMMARY
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check authorization based on environment
          authorization_required=false
          
          if [ "$ENVIRONMENT" = "prod" ]; then
            echo "🔥 **PRODUCTION ROLLBACK**: Requires code owner authorization" >> $GITHUB_STEP_SUMMARY
            authorization_required=true
          elif [ "$ENVIRONMENT" = "staging" ]; then
            echo "🚧 **STAGING ROLLBACK**: Requires code owner authorization" >> $GITHUB_STEP_SUMMARY
            authorization_required=true
          fi
          
          if [ "$authorization_required" = "true" ]; then
            # Read CODEOWNERS file to check authorization
            if [ -f ".github/CODEOWNERS" ]; then
              CODE_OWNERS=$(grep -E '^(\*|/.github/workflows/)' .github/CODEOWNERS | grep -oE '@[a-zA-Z0-9_-]+' | sort -u || echo "")
              
              echo "**Authorized Code Owners**: $CODE_OWNERS" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              if echo "$CODE_OWNERS" | grep -q "@$ACTOR"; then
                echo "✅ **AUTHORIZED**: $ACTOR is a code owner" >> $GITHUB_STEP_SUMMARY
                echo "Rollback operation authorized" >> $GITHUB_STEP_SUMMARY
                echo "authorized=true" >> $GITHUB_OUTPUT
                echo "approver=$ACTOR" >> $GITHUB_OUTPUT
              else
                echo "❌ **UNAUTHORIZED**: $ACTOR is not a code owner" >> $GITHUB_STEP_SUMMARY
                echo "Rollback operations for $ENVIRONMENT are restricted to code owners only" >> $GITHUB_STEP_SUMMARY
                echo "authorized=false" >> $GITHUB_OUTPUT
                exit 1
              fi
            else
              echo "❌ **ERROR**: No CODEOWNERS file found" >> $GITHUB_STEP_SUMMARY
              echo "Cannot verify authorization - rollback blocked" >> $GITHUB_STEP_SUMMARY
              echo "authorized=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "✅ **AUTHORIZED**: Development environment rollback" >> $GITHUB_STEP_SUMMARY
            echo "authorized=true" >> $GITHUB_OUTPUT
            echo "approver=$ACTOR" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine Rollback Target
        id: determine-target
        run: |
          echo "🎯 **DETERMINING ROLLBACK TARGET**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ROLLBACK_METHOD="${{ github.event.inputs.rollback_method }}"
          TARGET_COMMIT="${{ github.event.inputs.target_commit }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          
          case "$ROLLBACK_METHOD" in
            "last_known_good")
              echo "Finding last known good deployment for $ENVIRONMENT..." >> $GITHUB_STEP_SUMMARY
              
              # Get last successful deployment from GitHub API
              LAST_GOOD_DEPLOYMENT=$(gh api repos/${{ github.repository }}/deployments \
                --paginate | jq -r ".[] | select(.environment==\"$ENVIRONMENT\") | \
                select(.created_at) | {id: .id, sha: .sha, created_at: .created_at, status_url: .statuses_url}" | \
                jq -s 'sort_by(.created_at) | reverse' | jq -r '.[1] // empty')
              
              if [ -n "$LAST_GOOD_DEPLOYMENT" ]; then
                ROLLBACK_TARGET=$(echo "$LAST_GOOD_DEPLOYMENT" | jq -r '.sha')
                echo "**Last Known Good Commit**: $ROLLBACK_TARGET" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ Could not determine last known good deployment" >> $GITHUB_STEP_SUMMARY
                ROLLBACK_TARGET=$(git rev-parse HEAD~1)
                echo "**Using Previous Commit**: $ROLLBACK_TARGET" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
            "specific_commit")
              if [ -z "$TARGET_COMMIT" ]; then
                echo "❌ **ERROR**: specific_commit method requires target_commit input" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              
              # Validate commit exists
              if git rev-parse --verify "$TARGET_COMMIT" >/dev/null 2>&1; then
                ROLLBACK_TARGET="$TARGET_COMMIT"
                echo "**Target Commit**: $ROLLBACK_TARGET" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ **ERROR**: Invalid commit SHA: $TARGET_COMMIT" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              ;;
            *)
              ROLLBACK_TARGET=$(git rev-parse HEAD~1)
              echo "**Default Rollback Target**: $ROLLBACK_TARGET" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          # Get commit details
          COMMIT_MESSAGE=$(git log --format="%s" -n 1 "$ROLLBACK_TARGET" 2>/dev/null || echo "Unknown commit")
          COMMIT_DATE=$(git log --format="%ci" -n 1 "$ROLLBACK_TARGET" 2>/dev/null || echo "Unknown date")
          
          echo "**Commit Message**: $COMMIT_MESSAGE" >> $GITHUB_STEP_SUMMARY
          echo "**Commit Date**: $COMMIT_DATE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "rollback_target=$ROLLBACK_TARGET" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

  execute-rollback:
    name: Execute Rollback Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: rollback-authorization
    if: needs.rollback-authorization.outputs.authorized == 'true'
    outputs:
      rollback_success: ${{ steps.rollback.outputs.rollback_success }}
      rollback_url: ${{ steps.rollback.outputs.rollback_url }}
    steps:
      - name: Checkout Target Commit
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ needs.rollback-authorization.outputs.rollback_target }}
          fetch-depth: 0
      
      - name: Execute Rollback Deployment
        id: rollback
        run: |
          echo "🔄 **EXECUTING ROLLBACK DEPLOYMENT**" >> $GITHUB_STEP_SUMMARY
          echo "===================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rollback Target**: ${{ needs.rollback-authorization.outputs.rollback_target }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rollback Method**: ${{ github.event.inputs.rollback_method }}" >> $GITHUB_STEP_SUMMARY
          echo "**Authorized by**: ${{ needs.rollback-authorization.outputs.approver }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason**: ${{ github.event.inputs.rollback_reason }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          ROLLBACK_METHOD="${{ github.event.inputs.rollback_method }}"
          
          # Map environment names for deploy workflow
          case "$ENVIRONMENT" in
            "prod") DEPLOY_ENV="prod" ;;
            *) DEPLOY_ENV="$ENVIRONMENT" ;;
          esac
          
          # Determine what to deploy based on rollback method
          DEPLOY_INFRASTRUCTURE="true"
          DEPLOY_WEBSITE="true"
          
          case "$ROLLBACK_METHOD" in
            "infrastructure_only")
              DEPLOY_WEBSITE="false"
              echo "📋 Rolling back infrastructure only" >> $GITHUB_STEP_SUMMARY
              ;;
            "content_only")
              DEPLOY_INFRASTRUCTURE="false"
              echo "📄 Rolling back website content only" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "🔄 Rolling back complete deployment (infrastructure + content)" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Starting Rollback Deployment..." >> $GITHUB_STEP_SUMMARY
          
          # Trigger the DEPLOY workflow with rollback target
          gh workflow run deploy.yml \
            --field environment="$DEPLOY_ENV" \
            --field deploy_infrastructure="$DEPLOY_INFRASTRUCTURE" \
            --field deploy_website="$DEPLOY_WEBSITE" \
            --field skip_test_check=true \
            --ref ${{ needs.rollback-authorization.outputs.rollback_target }} \
            --wait
          
          # Check the deployment result
          LATEST_RUN=$(gh run list --workflow=deploy.yml --limit=1 --json status,conclusion,url,workflowName)
          STATUS=$(echo "$LATEST_RUN" | jq -r '.[0].status')
          CONCLUSION=$(echo "$LATEST_RUN" | jq -r '.[0].conclusion')
          RUN_URL=$(echo "$LATEST_RUN" | jq -r '.[0].url')
          
          echo "**Deployment Status**: $STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Conclusion**: $CONCLUSION" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Workflow**: $RUN_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CONCLUSION" = "success" ]; then
            echo "✅ **ROLLBACK DEPLOYMENT SUCCEEDED**" >> $GITHUB_STEP_SUMMARY
            echo "Site has been rolled back to previous state" >> $GITHUB_STEP_SUMMARY
            echo "rollback_success=true" >> $GITHUB_OUTPUT
            
            # Construct the likely website URL (this would be better retrieved from deployment outputs)
            if [ "$ENVIRONMENT" = "prod" ]; then
              ROLLBACK_URL="https://production.example.com"
            elif [ "$ENVIRONMENT" = "staging" ]; then
              ROLLBACK_URL="https://staging.example.com"
            else
              ROLLBACK_URL="https://dev.example.com"
            fi
            
            echo "rollback_url=$ROLLBACK_URL" >> $GITHUB_OUTPUT
            
            # Create deployment record for rollback
            gh api repos/${{ github.repository }}/deployments \
              --method POST \
              --field ref="${{ needs.rollback-authorization.outputs.rollback_target }}" \
              --field environment="$ENVIRONMENT" \
              --field auto_merge=false \
              --field required_contexts='[]' \
              --field description="Rollback deployment: ${{ github.event.inputs.rollback_reason }}" \
              --silent || true
              
          else
            echo "❌ **ROLLBACK DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Rollback was not successful - site may be in unstable state" >> $GITHUB_STEP_SUMMARY
            echo "Manual intervention may be required" >> $GITHUB_STEP_SUMMARY
            echo "rollback_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  post-rollback-validation:
    name: Post-Rollback Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [rollback-authorization, execute-rollback]
    if: needs.execute-rollback.outputs.rollback_success == 'true'
    outputs:
      validation_passed: ${{ steps.validate.outputs.validation_passed }}
    steps:
      - name: Validate Rollback Success
        id: validate
        run: |
          echo "🔍 **POST-ROLLBACK VALIDATION**" >> $GITHUB_STEP_SUMMARY
          echo "==============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ROLLBACK_URL="${{ needs.execute-rollback.outputs.rollback_url }}"
          echo "**Rollback URL**: $ROLLBACK_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Wait for rollback propagation
          echo "⏳ Waiting for rollback propagation (90 seconds)..." >> $GITHUB_STEP_SUMMARY
          sleep 90
          
          validation_passed=true
          
          # Basic connectivity test
          echo "### 📡 Connectivity Test" >> $GITHUB_STEP_SUMMARY
          if curl -s -f -I "$ROLLBACK_URL" >/dev/null 2>&1; then
            echo "✅ Site is accessible after rollback" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Site is not accessible after rollback" >> $GITHUB_STEP_SUMMARY
            validation_passed=false
          fi
          
          # Response time test
          echo "### ⚡ Performance Test" >> $GITHUB_STEP_SUMMARY
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}\n' "$ROLLBACK_URL" 2>/dev/null || echo "999")
          if [ $(echo "$RESPONSE_TIME < 5.0" | bc -l 2>/dev/null || echo "0") -eq 1 ]; then
            echo "✅ Response time acceptable: ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Response time may be degraded: ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          fi
          
          # HTTP status test
          echo "### 🌐 HTTP Status Test" >> $GITHUB_STEP_SUMMARY
          HTTP_STATUS=$(curl -o /dev/null -s -w '%{http_code}\n' "$ROLLBACK_URL" 2>/dev/null || echo "000")
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ HTTP Status OK: $HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ HTTP Status Error: $HTTP_STATUS" >> $GITHUB_STEP_SUMMARY
            validation_passed=false
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$validation_passed" = "true" ]; then
            echo "✅ **Post-rollback validation passed**" >> $GITHUB_STEP_SUMMARY
            echo "Site appears to be functioning correctly after rollback" >> $GITHUB_STEP_SUMMARY
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ **Post-rollback validation failed**" >> $GITHUB_STEP_SUMMARY
            echo "Site may still have issues after rollback - manual investigation required" >> $GITHUB_STEP_SUMMARY
            echo "validation_passed=false" >> $GITHUB_OUTPUT
          fi

  rollback-summary:
    name: Rollback Operation Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [rollback-authorization, execute-rollback, post-rollback-validation]
    if: always()
    steps:
      - name: Generate Rollback Summary
        run: |
          echo "🔄 **ROLLBACK OPERATION SUMMARY**" >> $GITHUB_STEP_SUMMARY
          echo "===============================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Rollback Reason**: ${{ github.event.inputs.rollback_reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Authorized by**: ${{ needs.rollback-authorization.outputs.approver }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rollback Method**: ${{ github.event.inputs.rollback_method }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Commit**: ${{ needs.rollback-authorization.outputs.rollback_target }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Operation Steps Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Authorization**: ${{ needs.rollback-authorization.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback Deployment**: ${{ needs.execute-rollback.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Post-Rollback Validation**: ${{ needs.post-rollback-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Final status
          ROLLBACK_SUCCESS="${{ needs.execute-rollback.outputs.rollback_success }}"
          VALIDATION_PASSED="${{ needs.post-rollback-validation.outputs.validation_passed }}"
          
          if [ "$ROLLBACK_SUCCESS" = "true" ]; then
            if [ "$VALIDATION_PASSED" = "true" ]; then
              echo "✅ **ROLLBACK COMPLETED SUCCESSFULLY**" >> $GITHUB_STEP_SUMMARY
              echo "🔄 Site has been successfully rolled back and is functioning properly" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🌐 **Rolled Back Site**: [${{ needs.execute-rollback.outputs.rollback_url }}](${{ needs.execute-rollback.outputs.rollback_url }})" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
              echo "- Monitor site functionality closely" >> $GITHUB_STEP_SUMMARY
              echo "- Verify the original issue has been resolved" >> $GITHUB_STEP_SUMMARY
              echo "- Update team on rollback status" >> $GITHUB_STEP_SUMMARY
              echo "- Plan proper fix for the rolled-back changes" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **ROLLBACK COMPLETED WITH WARNINGS**" >> $GITHUB_STEP_SUMMARY
              echo "Site has been rolled back but validation detected potential issues" >> $GITHUB_STEP_SUMMARY
              echo "Manual verification recommended" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **ROLLBACK FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Rollback operation was not successful" >> $GITHUB_STEP_SUMMARY
            echo "Manual intervention and investigation required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Emergency Actions:" >> $GITHUB_STEP_SUMMARY
            echo "- Check deployment logs for failure details" >> $GITHUB_STEP_SUMMARY
            echo "- Consider manual rollback procedures" >> $GITHUB_STEP_SUMMARY
            echo "- Engage additional team members for assistance" >> $GITHUB_STEP_SUMMARY
            echo "- Document the incident for future reference" >> $GITHUB_STEP_SUMMARY
          fi