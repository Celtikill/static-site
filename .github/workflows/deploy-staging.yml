name: DEPLOY-STAGING - Staging Environment Deployment

on:
  workflow_dispatch:
    inputs:
      test_id:
        description: 'Test ID from TEST workflow (required for staging)'
        required: true
        type: string
      build_id:
        description: 'Build ID to reference (required for staging)'
        required: true
        type: string
      dev_deployment_id:
        description: 'Development deployment ID for traceability'
        required: false
        type: string
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        default: true
        type: boolean
      deploy_website:
        description: 'Deploy website content'
        required: false
        default: true
        type: boolean
      bypass_dev_requirement:
        description: 'Bypass requirement for successful dev deployment (emergency only)'
        required: false
        default: false
        type: boolean
  workflow_run:
    workflows: ["DEPLOY-DEV - Development Environment Deployment"]
    types: [completed]
    branches:
      - main
      - develop

# OIDC Authentication Permissions for Staging Deployment
permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read
  deployments: write

# Staging Environment - Prevent concurrent deployments for stability
concurrency:
  group: static-site-staging-deployment
  cancel-in-progress: false

jobs:
  validate-prerequisites:
    name: Validate Staging Prerequisites
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      dev_deployment_success: ${{ steps.check-dev.outputs.dev_deployment_success }}
      can_proceed: ${{ steps.check-dev.outputs.can_proceed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Check Development Deployment Status
        id: check-dev
        run: |
          echo "## 🔍 Staging Prerequisites Validation" >> $GITHUB_STEP_SUMMARY
          
          BYPASS_DEV="${{ github.event.inputs.bypass_dev_requirement }}"
          
          if [ "$BYPASS_DEV" = "true" ]; then
            echo "⚠️ **EMERGENCY BYPASS**: Development requirement bypassed" >> $GITHUB_STEP_SUMMARY
            echo "dev_deployment_success=bypassed" >> $GITHUB_OUTPUT
            echo "can_proceed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if triggered by successful dev deployment
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              echo "✅ Development deployment completed successfully" >> $GITHUB_STEP_SUMMARY
              echo "dev_deployment_success=true" >> $GITHUB_OUTPUT
              echo "can_proceed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Development deployment failed - cannot proceed to staging" >> $GITHUB_STEP_SUMMARY
              echo "dev_deployment_success=false" >> $GITHUB_OUTPUT
              echo "can_proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            # Manual dispatch - require dev deployment ID or bypass
            if [ -n "${{ github.event.inputs.dev_deployment_id }}" ]; then
              echo "📋 Development deployment ID provided: ${{ github.event.inputs.dev_deployment_id }}" >> $GITHUB_STEP_SUMMARY
              echo "dev_deployment_success=verified" >> $GITHUB_OUTPUT
              echo "can_proceed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ No development deployment ID provided for manual staging deployment" >> $GITHUB_STEP_SUMMARY
              echo "Please provide dev_deployment_id or use bypass_dev_requirement for emergency deployments" >> $GITHUB_STEP_SUMMARY
              echo "dev_deployment_success=false" >> $GITHUB_OUTPUT
              echo "can_proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

  deploy-info:
    name: Staging Deployment Information
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: validate-prerequisites
    if: needs.validate-prerequisites.outputs.can_proceed == 'true'
    outputs:
      deploy_id: ${{ steps.generate-id.outputs.deploy_id }}
      test_id: ${{ steps.generate-id.outputs.test_id }}
      build_id: ${{ steps.generate-id.outputs.build_id }}
      deploy_infrastructure: ${{ steps.generate-id.outputs.deploy_infrastructure }}
      deploy_website: ${{ steps.generate-id.outputs.deploy_website }}
      has_tf_changes: ${{ steps.detect-changes.outputs.has_tf_changes }}
      has_content_changes: ${{ steps.detect-changes.outputs.has_content_changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Generate Staging Deployment ID
        id: generate-id
        run: |
          # Staging environment - enhanced validation and traceability
          TEST_ID_INPUT='${{ github.event.inputs.test_id }}'
          BUILD_ID_INPUT='${{ github.event.inputs.build_id }}'
          
          # Validate required inputs for staging
          if [ -z "$TEST_ID_INPUT" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "❌ ERROR: Test ID is required for staging deployments"
            exit 1
          fi
          
          if [ -z "$BUILD_ID_INPUT" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "❌ ERROR: Build ID is required for staging deployments"
            exit 1
          fi
          
          # Set IDs with staging-specific defaults
          if [ -n "$TEST_ID_INPUT" ]; then
            TEST_ID="$TEST_ID_INPUT"
          else
            TEST_ID="test-staging-${{ github.run_id }}"
          fi
          
          if [ -n "$BUILD_ID_INPUT" ]; then
            BUILD_ID="$BUILD_ID_INPUT"
          else
            BUILD_ID="build-staging-${{ github.run_id }}"
          fi
          
          DEPLOY_INFRASTRUCTURE="${{ github.event.inputs.deploy_infrastructure || 'true' }}"
          DEPLOY_WEBSITE="${{ github.event.inputs.deploy_website || 'true' }}"
          DEPLOY_ID="deploy-staging-${{ github.run_id }}-${{ github.run_attempt }}"
          
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "test_id=$TEST_ID" >> $GITHUB_OUTPUT
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "deploy_infrastructure=$DEPLOY_INFRASTRUCTURE" >> $GITHUB_OUTPUT
          echo "deploy_website=$DEPLOY_WEBSITE" >> $GITHUB_OUTPUT
          
          echo "🚀 **STAGING DEPLOY Phase Started**" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: $DEPLOY_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Test ID**: $TEST_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Build ID**: $BUILD_ID" >> $GITHUB_STEP_SUMMARY
          echo "**Dev Deployment**: ${{ needs.validate-prerequisites.outputs.dev_deployment_success }}" >> $GITHUB_STEP_SUMMARY

      - name: Enhanced Change Detection
        id: detect-changes
        run: |
          echo "🔍 **Analyzing Changes for Staging Deployment**" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced change detection for staging
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Get files from the triggering workflow
            CHANGED_FILES=$(git diff --name-only HEAD~5 HEAD 2>/dev/null || echo "")
          else
            # Manual dispatch - compare with main
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD 2>/dev/null || echo "")
          fi
          
          # Conservative change detection for staging
          HAS_TF_CHANGES=0
          HAS_CONTENT_CHANGES=0
          
          if [ -n "$CHANGED_FILES" ]; then
            # Strict infrastructure change detection
            if echo "$CHANGED_FILES" | grep -qE '^terraform/.*\.(tf|tfvars)$'; then
              HAS_TF_CHANGES=1
              echo "🏗️ Infrastructure changes detected:" >> $GITHUB_STEP_SUMMARY
              echo "$CHANGED_FILES" | grep -E '^terraform/' >> $GITHUB_STEP_SUMMARY
            fi
            
            # Content change detection
            if echo "$CHANGED_FILES" | grep -qE '^src/'; then
              HAS_CONTENT_CHANGES=1
              echo "📄 Content changes detected:" >> $GITHUB_STEP_SUMMARY
              echo "$CHANGED_FILES" | grep -E '^src/' >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Force deployment if explicitly requested
          if [ "${{ github.event.inputs.deploy_infrastructure }}" = "true" ]; then
            HAS_TF_CHANGES=1
          fi
          if [ "${{ github.event.inputs.deploy_website }}" = "true" ]; then
            HAS_CONTENT_CHANGES=1
          fi
          
          echo "has_tf_changes=$HAS_TF_CHANGES" >> $GITHUB_OUTPUT
          echo "has_content_changes=$HAS_CONTENT_CHANGES" >> $GITHUB_OUTPUT
          
          echo "**Infrastructure Changes**: $HAS_TF_CHANGES" >> $GITHUB_STEP_SUMMARY
          echo "**Content Changes**: $HAS_CONTENT_CHANGES" >> $GITHUB_STEP_SUMMARY

  deploy-infrastructure:
    name: Deploy Staging Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-prerequisites, deploy-info]
    if: needs.deploy-info.outputs.deploy_infrastructure == 'true' && (needs.deploy-info.outputs.has_tf_changes == '1' || github.event.inputs.deploy_infrastructure == 'true')
    environment: staging
    outputs:
      deployment_outputs: ${{ steps.deploy.outputs.deployment_outputs }}
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
      s3_bucket_id: ${{ steps.deploy.outputs.s3_bucket_id }}
      cloudfront_distribution_id: ${{ steps.deploy.outputs.cloudfront_distribution_id }}
      cloudfront_domain_name: ${{ steps.deploy.outputs.cloudfront_domain_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Cache Infrastructure Dependencies
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ~/.cache/terraform
            terraform/.terraform
            terraform/.terraform.lock.hcl
          key: deploy-staging-infra-${{ runner.os }}-${{ hashFiles('terraform/*.tf', 'terraform/.terraform.lock.hcl') }}
          restore-keys: |
            deploy-staging-infra-${{ runner.os }}-
            deploy-infra-${{ runner.os }}-

      - name: Setup Infrastructure
        uses: ./.github/actions/setup-infrastructure
        with:
          aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}
          aws-role: ${{ secrets.AWS_ASSUME_ROLE_STAGING }}

      - name: Prepare Environment Variables
        id: prepare-env
        run: |
          PROJECT_NAME=$(echo "${{ github.repository_owner }}-static-site" | tr '[:upper:]' '[:lower:]')
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "Using project name: $PROJECT_NAME" >> $GITHUB_STEP_SUMMARY

      - name: Initialize Staging Backend
        working-directory: terraform
        run: |
          echo "## 🔧 Initializing Staging Backend" >> $GITHUB_STEP_SUMMARY
          
          # Get AWS Account ID for bucket name
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Initialize with staging backend configuration
          tofu init \
            -backend-config=backend-staging.hcl \
            -backend-config="bucket=static-site-terraform-state-${AWS_ACCOUNT_ID}" \
            -reconfigure
          
          echo "✅ Staging backend initialized with enhanced validation" >> $GITHUB_STEP_SUMMARY

      - name: Staging Infrastructure Plan
        working-directory: terraform
        env:
          TF_VAR_environment: staging
          TF_VAR_project_name: ${{ steps.prepare-env.outputs.project_name }}
          TF_VAR_github_repository: ${{ github.repository }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION || 'us-east-2' }}
          # Staging-specific configurations
          TF_VAR_enable_cross_region_replication: true
          TF_VAR_cloudfront_price_class: PriceClass_200
          TF_VAR_waf_rate_limit: 2000
          TF_VAR_enable_detailed_monitoring: true
          TF_VAR_force_destroy_bucket: false
          TF_VAR_monthly_budget_limit: "25"
          TF_VAR_log_retention_days: 30
          TF_VAR_alert_email_addresses: ${{ secrets.ALERT_EMAIL_ADDRESSES || '["staging-alerts@example.com"]' }}
        run: |
          echo "## 📋 Staging Infrastructure Planning" >> $GITHUB_STEP_SUMMARY
          
          # Create staging deployment plan with enhanced validation
          tofu plan -detailed-exitcode -out=staging-deployment.tfplan
          PLAN_EXIT_CODE=$?
          
          if [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "✅ No infrastructure changes required" >> $GITHUB_STEP_SUMMARY
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "📋 Infrastructure changes planned for staging:" >> $GITHUB_STEP_SUMMARY
            tofu show staging-deployment.tfplan | grep -E '(will be created|will be updated|will be destroyed)' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Staging infrastructure planning failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Deploy Staging Infrastructure
        id: deploy
        working-directory: terraform
        run: |
          echo "## 🏗️ Staging Infrastructure Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: ${{ needs.deploy-info.outputs.deploy_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          
          # Apply staging deployment with timeout
          if timeout 18m tofu apply -auto-approve staging-deployment.tfplan; then
            echo "✅ Staging infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            
            # Capture outputs with validation
            if tofu output -json > staging-deployment-outputs.json 2>/dev/null; then
              OUTPUTS=$(cat staging-deployment-outputs.json | jq -c . 2>/dev/null || echo '{}')
              echo "deployment_outputs=$OUTPUTS" >> $GITHUB_OUTPUT
              
              # Extract and validate key outputs
              S3_BUCKET=$(jq -r '.s3_bucket_id.value // empty' staging-deployment-outputs.json)
              CF_DISTRIBUTION=$(jq -r '.cloudfront_distribution_id.value // empty' staging-deployment-outputs.json)
              CF_DOMAIN=$(jq -r '.cloudfront_domain_name.value // empty' staging-deployment-outputs.json)
              
              echo "s3_bucket_id=$S3_BUCKET" >> $GITHUB_OUTPUT
              echo "cloudfront_distribution_id=$CF_DISTRIBUTION" >> $GITHUB_OUTPUT
              echo "cloudfront_domain_name=$CF_DOMAIN" >> $GITHUB_OUTPUT
              
              echo "### 📊 Staging Deployment Outputs" >> $GITHUB_STEP_SUMMARY
              echo "- **S3 Bucket**: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
              echo "- **CloudFront Distribution**: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
              echo "- **CloudFront Domain**: $CF_DOMAIN" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Staging infrastructure deployment failed" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            
            # Capture failure state for analysis
            tofu show 2>/dev/null | tail -50 >> $GITHUB_STEP_SUMMARY || echo "Could not show current state"
            exit 1
          fi

      - name: Post-Deployment Validation
        if: steps.deploy.outputs.deployment_status == 'success'
        run: |
          echo "### 🔍 Staging Post-Deployment Validation" >> $GITHUB_STEP_SUMMARY
          
          S3_BUCKET="${{ steps.deploy.outputs.s3_bucket_id }}"
          CF_DISTRIBUTION="${{ steps.deploy.outputs.cloudfront_distribution_id }}"
          
          validation_errors=0
          
          # Enhanced validation for staging
          if [ -n "$S3_BUCKET" ]; then
            if aws s3 ls "s3://$S3_BUCKET" >/dev/null 2>&1; then
              echo "✅ S3 bucket accessible: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
              
              # Check bucket encryption
              if aws s3api get-bucket-encryption --bucket "$S3_BUCKET" >/dev/null 2>&1; then
                echo "✅ S3 bucket encryption verified" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ S3 bucket encryption not configured" >> $GITHUB_STEP_SUMMARY
                validation_errors=$((validation_errors + 1))
              fi
            else
              echo "❌ S3 bucket not accessible: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
              validation_errors=$((validation_errors + 1))
            fi
          fi
          
          # CloudFront validation
          if [ -n "$CF_DISTRIBUTION" ]; then
            if aws cloudfront get-distribution --id "$CF_DISTRIBUTION" >/dev/null 2>&1; then
              echo "✅ CloudFront distribution accessible: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
              
              # Check distribution status
              STATUS=$(aws cloudfront get-distribution --id "$CF_DISTRIBUTION" --query 'Distribution.Status' --output text)
              echo "📊 CloudFront status: $STATUS" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ CloudFront distribution not accessible: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
              validation_errors=$((validation_errors + 1))
            fi
          fi
          
          if [ $validation_errors -eq 0 ]; then
            echo "✅ Staging post-deployment validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Staging validation failed with $validation_errors errors" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload Staging Deployment Outputs
        if: steps.deploy.outputs.deployment_status == 'success'
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: ${{ needs.deploy-info.outputs.deploy_id }}-staging-infrastructure-outputs
          path: terraform/staging-deployment-outputs.json
          retention-days: 30

  deploy-website:
    name: Deploy Staging Website
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [deploy-info, deploy-infrastructure]
    if: needs.deploy-info.outputs.deploy_website == 'true' && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped') && (needs.deploy-info.outputs.has_content_changes == '1' || github.event.inputs.deploy_website == 'true')
    environment: staging
    outputs:
      website_url: ${{ steps.deploy-content.outputs.website_url }}
      deployment_status: ${{ steps.deploy-content.outputs.deployment_status }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Infrastructure
        uses: ./.github/actions/setup-infrastructure
        with:
          aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}
          aws-role: ${{ secrets.AWS_ASSUME_ROLE_STAGING }}

      - name: Download Website Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: website-*
          merge-multiple: true
        continue-on-error: true

      - name: Deploy Staging Website Content
        id: deploy-content
        env:
          S3_BUCKET: ${{ needs.deploy-infrastructure.outputs.s3_bucket_id }}
          CF_DISTRIBUTION: ${{ needs.deploy-infrastructure.outputs.cloudfront_distribution_id }}
          CF_DOMAIN: ${{ needs.deploy-infrastructure.outputs.cloudfront_domain_name }}
        run: |
          echo "## 🌐 Staging Website Content Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: ${{ needs.deploy-info.outputs.deploy_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          
          # Prefer built artifacts for staging
          if [ -d "build" ]; then
            CONTENT_DIR="build"
            echo "✅ Using built website content from artifacts" >> $GITHUB_STEP_SUMMARY
          else
            CONTENT_DIR="src"
            echo "⚠️ Using source content (no build artifacts found)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Get S3 bucket from infrastructure deployment or discover it
          if [ -z "$S3_BUCKET" ]; then
            echo "🔍 Discovering S3 bucket from Staging Terraform state..." >> $GITHUB_STEP_SUMMARY
            cd terraform
            
            # Get AWS Account ID for backend
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            
            # Initialize backend to read state
            tofu init \
              -backend-config=backend-staging.hcl \
              -backend-config="bucket=static-site-terraform-state-${AWS_ACCOUNT_ID}" \
              -reconfigure
            
            S3_BUCKET=$(tofu output -raw s3_bucket_id 2>/dev/null || echo "")
            CF_DISTRIBUTION=$(tofu output -raw cloudfront_distribution_id 2>/dev/null || echo "")
            CF_DOMAIN=$(tofu output -raw cloudfront_domain_name 2>/dev/null || echo "")
            cd ..
          fi
          
          if [ -z "$S3_BUCKET" ]; then
            echo "❌ Could not determine S3 bucket for staging deployment" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "### 📋 Staging Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: $S3_BUCKET" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Distribution**: $CF_DISTRIBUTION" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Domain**: $CF_DOMAIN" >> $GITHUB_STEP_SUMMARY
          echo "- **Content Directory**: $CONTENT_DIR" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced content sync for staging
          echo "### 🚀 Syncing Content to Staging S3" >> $GITHUB_STEP_SUMMARY
          if aws s3 sync "$CONTENT_DIR/" "s3://$S3_BUCKET" \
            --delete \
            --exact-timestamps \
            --metadata-directive REPLACE \
            --cache-control "max-age=3600"; then
            echo "✅ Staging content synced successfully with enhanced metadata" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to sync staging content" >> $GITHUB_STEP_SUMMARY
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # CloudFront cache invalidation for staging
          if [ -n "$CF_DISTRIBUTION" ]; then
            echo "### 🔄 Invalidating Staging CloudFront Cache" >> $GITHUB_STEP_SUMMARY
            INVALIDATION_ID=$(aws cloudfront create-invalidation \
              --distribution-id "$CF_DISTRIBUTION" \
              --paths "/*" \
              --query 'Invalidation.Id' \
              --output text)
            
            if [ $? -eq 0 ]; then
              echo "✅ Staging cache invalidation created: $INVALIDATION_ID" >> $GITHUB_STEP_SUMMARY
              
              # Wait for invalidation to start (staging validation)
              sleep 10
              STATUS=$(aws cloudfront get-invalidation \
                --distribution-id "$CF_DISTRIBUTION" \
                --id "$INVALIDATION_ID" \
                --query 'Invalidation.Status' \
                --output text)
              echo "📊 Invalidation status: $STATUS" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Failed to create CloudFront cache invalidation" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Set outputs
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          if [ -n "$CF_DOMAIN" ]; then
            echo "website_url=https://$CF_DOMAIN" >> $GITHUB_OUTPUT
            echo "### 🌐 Staging Website URL" >> $GITHUB_STEP_SUMMARY
            echo "**Staging site is live at**: https://$CF_DOMAIN" >> $GITHUB_STEP_SUMMARY
          else
            echo "website_url=https://$S3_BUCKET.s3.amazonaws.com" >> $GITHUB_OUTPUT
          fi

      - name: Staging Website Verification
        run: |
          echo "### 🔍 Staging Website Verification" >> $GITHUB_STEP_SUMMARY
          
          WEBSITE_URL="${{ steps.deploy-content.outputs.website_url }}"
          
          if [ -n "$WEBSITE_URL" ]; then
            echo "Testing staging website accessibility: $WEBSITE_URL"
            
            # Enhanced verification for staging
            sleep 30
            
            # Basic accessibility check
            if curl -s -f -I "$WEBSITE_URL" >/dev/null; then
              echo "✅ Staging website is accessible" >> $GITHUB_STEP_SUMMARY
              
              # Check for security headers
              HEADERS=$(curl -s -I "$WEBSITE_URL")
              if echo "$HEADERS" | grep -i "x-frame-options" >/dev/null; then
                echo "✅ Security headers detected" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ Security headers verification recommended" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "⚠️ Staging website may not be immediately accessible (propagation delay expected)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  deployment-summary:
    name: Staging Deployment Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-prerequisites, deploy-info, deploy-infrastructure, deploy-website]
    if: always()
    outputs:
      website_url: ${{ steps.export-url.outputs.website_url }}
      deployment_success: ${{ steps.export-url.outputs.deployment_success }}
    steps:
      - name: Generate Staging Summary
        run: |
          echo "## 🚀 STAGING DEPLOY Complete" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy ID**: ${{ needs.deploy-info.outputs.deploy_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "**Prerequisites**: ${{ needs.validate-prerequisites.outputs.dev_deployment_success }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerequisites**: ${{ needs.validate-prerequisites.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure**: ${{ needs.deploy-infrastructure.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Website**: ${{ needs.deploy-website.result }}" >> $GITHUB_STEP_SUMMARY
          
          WEBSITE_URL="${{ needs.deploy-website.outputs.website_url }}"
          if [ -n "$WEBSITE_URL" ]; then
            echo "### 🌐 Staging Website" >> $GITHUB_STEP_SUMMARY
            echo "**Live URL**: $WEBSITE_URL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps for Production" >> $GITHUB_STEP_SUMMARY
            echo "- Verify staging functionality" >> $GITHUB_STEP_SUMMARY
            echo "- Run integration tests" >> $GITHUB_STEP_SUMMARY
            echo "- Approve for production deployment" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Export Staging URL
        id: export-url
        run: |
          WEBSITE_URL="${{ needs.deploy-website.outputs.website_url }}"
          PREREQ_STATUS="${{ needs.validate-prerequisites.result }}"
          INFRA_STATUS="${{ needs.deploy-infrastructure.result }}"
          WEBSITE_STATUS="${{ needs.deploy-website.result }}"
          
          echo "website_url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          
          if [ "$PREREQ_STATUS" = "success" ] && \
             ([ "$INFRA_STATUS" = "success" ] || [ "$INFRA_STATUS" = "skipped" ]) && \
             ([ "$WEBSITE_STATUS" = "success" ] || [ "$WEBSITE_STATUS" = "skipped" ]); then
            echo "deployment_success=true" >> $GITHUB_OUTPUT
            echo "✅ **STAGING DEPLOYMENT SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
          else
            echo "deployment_success=false" >> $GITHUB_OUTPUT
            echo "❌ **STAGING DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "$WEBSITE_URL" ]; then
            echo "🌐 Staging site ready for testing: $WEBSITE_URL"
          fi