name: BUILD - Code Validation and Artifact Creation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        type: choice
        options: [dev, staging, prod]
        default: dev
      force_build:
        description: 'Force build all components'
        required: false
        type: boolean
        default: false
  pull_request:
    branches: [main]
  push:
    branches: [main, 'feature/*', 'bugfix/*', 'hotfix/*']

permissions:
  id-token: write
  contents: read
  pull-requests: write
  security-events: write

env:
  AWS_DEFAULT_REGION: us-east-1
  TF_IN_AUTOMATION: true
  TF_CLI_ARGS: "-no-color"

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build_id: ${{ steps.info.outputs.build_id }}
      environment: ${{ steps.info.outputs.environment }}
      has_terraform_changes: ${{ steps.changes.outputs.terraform }}
      has_content_changes: ${{ steps.changes.outputs.content }}
      has_workflow_changes: ${{ steps.changes.outputs.workflows }}
      artifacts_created: ${{ steps.artifacts.outputs.created }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Info
        id: info
        run: |
          BUILD_ID="build-${{ github.run_id }}-${{ github.run_attempt }}"
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          echo "# 🏗️ BUILD Phase" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: $BUILD_ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: $ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Detect Changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            terraform:
              - 'terraform/**'
            content:
              - 'src/**'
            workflows:
              - '.github/workflows/**'
            docs:
              - '**/*.md'
            tests:
              - 'test/**'

      - name: Setup Tools
        if: steps.changes.outputs.terraform == 'true' || github.event.inputs.force_build == 'true'
        run: |
          echo "## 🔧 Setting up tools" >> $GITHUB_STEP_SUMMARY
          
          # Install OpenTofu
          curl -L -o /tmp/tofu.zip https://github.com/opentofu/opentofu/releases/download/v1.6.1/tofu_1.6.1_linux_amd64.zip
          unzip -q /tmp/tofu.zip -d /tmp
          sudo mv /tmp/tofu /usr/local/bin/
          echo "✅ OpenTofu installed: $(tofu version)" >> $GITHUB_STEP_SUMMARY
          
          # Install security tools
          pip3 install checkov --quiet
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Linux-64bit.tar.gz | tar xzf - -C /tmp
          sudo mv /tmp/trivy /usr/local/bin/
          echo "✅ Security tools installed" >> $GITHUB_STEP_SUMMARY

      - name: Validate Terraform
        if: steps.changes.outputs.terraform == 'true' || github.event.inputs.force_build == 'true'
        working-directory: terraform
        run: |
          echo "## ✅ Terraform Validation" >> $GITHUB_STEP_SUMMARY
          
          # Format check
          if tofu fmt -check -recursive; then
            echo "✅ Format check passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Format check failed - run 'tofu fmt -recursive'" >> $GITHUB_STEP_SUMMARY
            echo "**Files needing formatting:**" >> $GITHUB_STEP_SUMMARY
            tofu fmt -recursive -diff | head -20 >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Initialize without backend for validation
          cp backend.tf backend.tf.bak 2>/dev/null || true
          rm -f backend.tf
          
          if tofu init -backend=false; then
            echo "✅ Init successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Init failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Validate configuration
          if tofu validate; then
            echo "✅ Validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Validation failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Restore backend file
          mv backend.tf.bak backend.tf 2>/dev/null || true

      - name: Security Scanning
        if: steps.changes.outputs.terraform == 'true' || github.event.inputs.force_build == 'true'
        run: |
          echo "## 🔒 Security Scanning" >> $GITHUB_STEP_SUMMARY
          
          # Initialize error counter
          SECURITY_ERRORS=0
          
          # Run Checkov (blocking on critical/high findings)
          echo "### Checkov (Infrastructure as Code)" >> $GITHUB_STEP_SUMMARY
          if checkov -d terraform --quiet --compact --skip-check CKV_AWS_20,CKV_AWS_117; then
            echo "✅ Checkov scan passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Checkov found security issues" >> $GITHUB_STEP_SUMMARY
            SECURITY_ERRORS=$((SECURITY_ERRORS + 1))
          fi
          
          # Run Trivy (blocking on HIGH/CRITICAL vulnerabilities)
          echo "### Trivy (Vulnerability Scanner)" >> $GITHUB_STEP_SUMMARY
          if trivy fs --security-checks vuln,config terraform/ --severity HIGH,CRITICAL --quiet; then
            echo "✅ Trivy scan passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Trivy found HIGH/CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
            SECURITY_ERRORS=$((SECURITY_ERRORS + 1))
          fi
          
          # Fail build if security issues found
          if [ $SECURITY_ERRORS -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **BUILD FAILED** - $SECURITY_ERRORS security issue(s) found" >> $GITHUB_STEP_SUMMARY
            echo "Fix security issues before deployment" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All security scans passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Validate Website Content
        if: steps.changes.outputs.content == 'true' || github.event.inputs.force_build == 'true'
        run: |
          echo "## 🌐 Website Content Validation" >> $GITHUB_STEP_SUMMARY
          
          # Check required files
          REQUIRED_FILES=("src/index.html" "src/404.html" "src/robots.txt")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $file missing" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          done
          
          # Basic HTML validation
          if command -v html5validator >/dev/null 2>&1 || pip3 install html5validator --quiet; then
            if html5validator --root src/ --also-check-css; then
              echo "✅ HTML validation passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ HTML validation warnings (non-blocking)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Create Artifacts
        id: artifacts
        if: steps.changes.outputs.content == 'true' || steps.changes.outputs.terraform == 'true' || github.event.inputs.force_build == 'true'
        run: |
          echo "## 📦 Creating Build Artifacts" >> $GITHUB_STEP_SUMMARY
          
          # Create website archive
          if [ -d "src" ]; then
            tar -czf website-${{ steps.info.outputs.build_id }}.tar.gz -C src .
            echo "✅ Website archive created" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Create terraform archive
          if [ -d "terraform" ]; then
            tar -czf terraform-${{ steps.info.outputs.build_id }}.tar.gz terraform/
            echo "✅ Terraform archive created" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "created=true" >> $GITHUB_OUTPUT

      - name: Upload Artifacts
        if: steps.artifacts.outputs.created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.info.outputs.build_id }}
          path: |
            website-*.tar.gz
            terraform-*.tar.gz
          retention-days: 7

      - name: Build Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform | ${{ steps.changes.outputs.terraform == 'true' && '✅ Validated' || '➖ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Website | ${{ steps.changes.outputs.content == 'true' && '✅ Validated' || '➖ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ (steps.changes.outputs.terraform == 'true' || github.event.inputs.force_build == 'true') && '🔒 BLOCKING - Passed' || '➖ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "| Artifacts | ${{ steps.artifacts.outputs.created == 'true' && '✅ Created' || '➖ None needed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 **BUILD Successful** - Ready for TEST phase" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **BUILD Failed** - Check logs above for details" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi