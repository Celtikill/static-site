name: ORG - Organization Management (Isolated)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options: [plan, apply, destroy]
        default: plan
      scope:
        description: 'Scope of management operations'
        required: false
        type: choice
        options: [all, organization, roles]
        default: all
      import_mode:
        description: 'Import existing accounts instead of creating new'
        required: false
        type: boolean
        default: true
      create_mode:
        description: 'Create new accounts (for fresh demo setup)'
        required: false
        type: boolean
        default: false
      target_environments:
        description: 'Target environments for role operations (comma-separated or "all")'
        required: false
        type: string
        default: 'all'
      confirm_destruction:
        description: 'Type "CONFIRM" to allow destructive operations'
        required: false
        type: string
        default: ''

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  OPENTOFU_VERSION: ${{ vars.OPENTOFU_VERSION }}
  TF_IN_AUTOMATION: true
  TF_CLI_ARGS: "-no-color"
  NO_COLOR: 1

concurrency:
  group: org-management-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validation:
    name: "üîç Pre-flight Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_proceed: ${{ steps.validate.outputs.should_proceed }}
      action: ${{ steps.validate.outputs.action }}

    steps:
      - name: Validate inputs
        id: validate
        run: |
          echo "Validating organization management workflow inputs..."

          # Validate action
          if [[ "${{ inputs.action }}" == "destroy" && "${{ inputs.confirm_destruction }}" != "CONFIRM" ]]; then
            echo "‚ùå Destructive action requires confirmation"
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Validate mode consistency
          if [[ "${{ inputs.import_mode }}" == "true" && "${{ inputs.create_mode }}" == "true" ]]; then
            echo "‚ùå Cannot enable both import_mode and create_mode"
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "‚úÖ Validation passed"
          echo "should_proceed=true" >> $GITHUB_OUTPUT
          echo "action=${{ inputs.action }}" >> $GITHUB_OUTPUT

  bootstrap-management-backend:
    name: "üèóÔ∏è Bootstrap Management Backend (if needed)"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validation
    if: needs.validation.outputs.should_proceed == 'true' && (inputs.action == 'apply' || inputs.action == 'plan')
    environment:
      name: management
      url: https://console.aws.amazon.com/s3/buckets/static-site-terraform-state-us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CENTRAL }}
          role-session-name: GitHubActions-BootstrapMgmt-${{ github.run_id }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.OPENTOFU_VERSION }}

      - name: Check if management backend exists
        id: check_backend
        run: |
          echo "üîç Checking if management backend bucket exists..."

          BUCKET_NAME="static-site-terraform-state-us-east-1"

          if aws s3 ls "s3://$BUCKET_NAME" >/dev/null 2>&1; then
            echo "‚úÖ Management backend bucket already exists: $BUCKET_NAME"
            echo "backend_exists=true" >> $GITHUB_OUTPUT
            echo "backend_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Management backend bucket does not exist: $BUCKET_NAME"
            echo "üèóÔ∏è Will create management backend infrastructure"
            echo "backend_exists=false" >> $GITHUB_OUTPUT
            echo "backend_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Bootstrap management backend
        if: steps.check_backend.outputs.backend_exists == 'false'
        run: |
          echo "üöÄ Bootstrapping management account backend infrastructure..."

          # Create temporary directory for bootstrap
          mkdir -p bootstrap-mgmt
          cd bootstrap-mgmt

          # Create inline Terraform configuration for management backend
          cat > main.tf <<EOF
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
          }

          provider "aws" {
            region = "${{ env.AWS_DEFAULT_REGION }}"
            default_tags {
              tags = {
                Environment = "management"
                ManagedBy   = "terraform-bootstrap"
                Project     = "static-site"
                Purpose     = "backend-state"
              }
            }
          }

          # S3 bucket for management account state
          resource "aws_s3_bucket" "terraform_state" {
            bucket = "static-site-terraform-state-us-east-1"

            tags = {
              Name    = "management-terraform-state-bucket"
              Purpose = "terraform-backend"
            }
          }

          # S3 bucket versioning
          resource "aws_s3_bucket_versioning" "terraform_state" {
            bucket = aws_s3_bucket.terraform_state.id
            versioning_configuration {
              status = "Enabled"
            }
          }

          # S3 bucket encryption
          resource "aws_s3_bucket_server_side_encryption_configuration" "terraform_state" {
            bucket = aws_s3_bucket.terraform_state.id

            rule {
              apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
              }
              bucket_key_enabled = true
            }
          }

          # S3 bucket public access block
          resource "aws_s3_bucket_public_access_block" "terraform_state" {
            bucket = aws_s3_bucket.terraform_state.id

            block_public_acls       = true
            block_public_policy     = true
            ignore_public_acls      = true
            restrict_public_buckets = true
          }

          # DynamoDB table for state locking
          resource "aws_dynamodb_table" "terraform_state_lock" {
            name           = "static-site-locks-management"
            billing_mode   = "PAY_PER_REQUEST"
            hash_key       = "LockID"

            attribute {
              name = "LockID"
              type = "S"
            }

            tags = {
              Name    = "management-terraform-state-lock"
              Purpose = "terraform-backend"
            }
          }

          # Outputs
          output "bucket_name" {
            value       = aws_s3_bucket.terraform_state.id
            description = "Name of the S3 bucket for Terraform state"
          }

          output "dynamodb_table_name" {
            value       = aws_dynamodb_table.terraform_state_lock.name
            description = "Name of the DynamoDB table for state locking"
          }
          EOF

          echo "üìÑ Management backend configuration created"

          # Initialize with local backend (chicken-and-egg solution)
          echo "üîß Initializing bootstrap configuration with local backend..."
          tofu init

          # Plan bootstrap infrastructure
          echo "üìã Planning management backend bootstrap..."
          tofu plan -out=bootstrap.tfplan

          # Apply bootstrap infrastructure
          echo "üöÄ Creating management backend infrastructure..."
          tofu apply -auto-approve bootstrap.tfplan

          echo "‚úÖ Management backend bootstrap completed"

          # Show outputs
          echo "üìã Backend outputs:"
          tofu output

          # Clean up temporary directory
          cd ..
          rm -rf bootstrap-mgmt

      - name: Verify management backend
        run: |
          echo "üîç Verifying management backend is accessible..."

          BUCKET_NAME="${{ steps.check_backend.outputs.backend_bucket }}"

          # Verify S3 bucket
          if aws s3 ls "s3://$BUCKET_NAME" >/dev/null 2>&1; then
            echo "‚úÖ S3 bucket verified: $BUCKET_NAME"
          else
            echo "‚ùå S3 bucket verification failed: $BUCKET_NAME"
            exit 1
          fi

          # Check for DynamoDB table (if bootstrap creates one)
          TABLE_NAME="static-site-locks-management"
          if aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
            echo "‚úÖ DynamoDB table verified: $TABLE_NAME"
          else
            echo "‚ö†Ô∏è  DynamoDB table not found (may not be created): $TABLE_NAME"
          fi

          echo "‚úÖ Management backend verification completed"

  organization-management:
    name: "üè¢ Organization Management - ${{ inputs.action }}"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validation, bootstrap-management-backend]
    if: needs.validation.outputs.should_proceed == 'true'
    environment:
      name: management
      url: https://console.aws.amazon.com/organizations/v2/home

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CENTRAL }}
          role-session-name: GitHubActions-OrgManagement-${{ github.run_id }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.OPENTOFU_VERSION }}

      - name: Verify AWS access
        run: |
          echo "üîê Verifying AWS access..."
          aws sts get-caller-identity
          aws organizations describe-organization --output table || echo "‚ö†Ô∏è  Organization may not exist yet"

      - name: Initialize Terraform
        working-directory: terraform/foundations/org-management
        run: |
          echo "üöÄ Initializing Terraform for organization management..."
          tofu init -upgrade

      - name: Configure Terraform variables
        working-directory: terraform/foundations/org-management
        run: |
          echo "‚öôÔ∏è  Configuring Terraform variables..."
          cat > terraform.tfvars <<EOF
          import_existing_accounts = ${{ inputs.import_mode }}
          create_new_accounts = ${{ inputs.create_mode }}
          aws_region = "${{ env.AWS_DEFAULT_REGION }}"
          github_repo = "${{ github.repository }}"
          organization_name = "static-site-org"
          EOF

          echo "üìÑ Generated terraform.tfvars:"
          cat terraform.tfvars

      - name: Terraform Plan
        working-directory: terraform/foundations/org-management
        run: |
          echo "üìã Running Terraform plan..."
          tofu plan -detailed-exitcode -out=tfplan

          # Store plan result
          echo "PLAN_RESULT=$?" >> $GITHUB_ENV

      - name: Display Plan Summary
        working-directory: terraform/foundations/org-management
        if: always()
        run: |
          if [[ "$PLAN_RESULT" == "0" ]]; then
            echo "‚úÖ No changes required"
          elif [[ "$PLAN_RESULT" == "2" ]]; then
            echo "üìù Changes detected - plan saved to tfplan"
            echo ""
            echo "### Plan Summary"
            tofu show -no-color tfplan | head -50
          else
            echo "‚ùå Plan failed"
            exit 1
          fi

      - name: Terraform Apply
        working-directory: terraform/foundations/org-management
        if: inputs.action == 'apply' && env.PLAN_RESULT == '2'
        run: |
          echo "üöÄ Applying Terraform changes..."
          tofu apply -auto-approve tfplan

          echo ""
          echo "### Applied Changes Summary"
          tofu output -json | jq .

      - name: Terraform Destroy
        working-directory: terraform/foundations/org-management
        if: inputs.action == 'destroy'
        run: |
          echo "üóëÔ∏è  Destroying organization management infrastructure..."
          echo "‚ö†Ô∏è  This will remove organization structure, accounts, and policies"
          tofu destroy -auto-approve

      - name: Organization Status
        if: always() && (inputs.action == 'plan' || inputs.action == 'apply')
        run: |
          echo "üè¢ Current Organization Status:"
          echo ""

          # Organization overview
          aws organizations describe-organization --output table 2>/dev/null || echo "No organization found"

          echo ""
          echo "üìä Organizational Units:"
          aws organizations list-organizational-units-for-parent \
            --parent-id $(aws organizations list-roots --query 'Roots[0].Id' --output text 2>/dev/null) \
            --output table 2>/dev/null || echo "No OUs found"

          echo ""
          echo "üë• Accounts:"
          aws organizations list-accounts --output table 2>/dev/null || echo "No accounts found"

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        if: inputs.action == 'plan' && env.PLAN_RESULT == '2'
        with:
          name: org-management-plan-${{ github.run_id }}
          path: terraform/foundations/org-management/tfplan
          retention-days: 7

  cross-account-roles:
    name: "üîê Cross-Account Role Management"
    if: inputs.scope == 'all' || inputs.scope == 'roles'
    uses: ./.github/workflows/reusable-cross-account-roles.yml
    with:
      account_mapping: |
        {
          "dev": "822529998967",
          "staging": "927588814642",
          "prod": "546274483801"
        }
      external_id: "github-actions-static-site"
      management_account_id: "223938610551"
      action: ${{ inputs.action }}
      target_environments: ${{ inputs.target_environments }}
    secrets:
      aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_CENTRAL }}

  summary:
    name: "üìä Workflow Summary"
    runs-on: ubuntu-latest
    needs: [validation, organization-management, cross-account-roles]
    if: always()

    steps:
      - name: Workflow Summary
        run: |
          echo "## Organization Management Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scope:** ${{ inputs.scope }}" >> $GITHUB_STEP_SUMMARY
          echo "**Import Mode:** ${{ inputs.import_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Create Mode:** ${{ inputs.create_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environments:** ${{ inputs.target_environments }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Organization Management Status
          if [[ "${{ inputs.scope }}" == "all" || "${{ inputs.scope }}" == "organization" ]]; then
            echo "### üèõÔ∏è Organization Management" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.organization-management.result }}" == "success" ]]; then
              echo "‚úÖ **Organization setup completed successfully**" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.organization-management.result }}" == "failure" ]]; then
              echo "‚ùå **Organization setup failed** - Check logs for details" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.organization-management.result }}" == "skipped" ]]; then
              echo "‚è≠Ô∏è **Organization setup skipped**" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Cross-Account Roles Status
          if [[ "${{ inputs.scope }}" == "all" || "${{ inputs.scope }}" == "roles" ]]; then
            echo "### üîê Cross-Account Roles" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ needs.cross-account-roles.result }}" == "success" ]]; then
              echo "‚úÖ **Cross-account roles managed successfully**" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.cross-account-roles.result }}" == "failure" ]]; then
              echo "‚ùå **Cross-account roles failed** - Check logs for details" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.cross-account-roles.result }}" == "skipped" ]]; then
              echo "‚è≠Ô∏è **Cross-account roles skipped**" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Overall Status
          if [[ "${{ needs.validation.result }}" == "failure" ]]; then
            echo "‚ùå **Overall Status: Validation Failed** - Check input parameters" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.organization-management.result }}" == "success" && "${{ needs.cross-account-roles.result }}" == "success" ]]; then
            echo "‚úÖ **Overall Status: All Operations Completed Successfully**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.organization-management.result }}" == "failure" || "${{ needs.cross-account-roles.result }}" == "failure" ]]; then
            echo "‚ùå **Overall Status: Some Operations Failed** - Check individual job logs" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ÑπÔ∏è **Overall Status: Operations Completed** - Some jobs may have been skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review organization structure in AWS Console" >> $GITHUB_STEP_SUMMARY
          echo "- Verify cross-account roles can be assumed" >> $GITHUB_STEP_SUMMARY
          echo "- Test GitHub Actions deployment workflows" >> $GITHUB_STEP_SUMMARY
          echo "- Update GitHub secrets if needed" >> $GITHUB_STEP_SUMMARY